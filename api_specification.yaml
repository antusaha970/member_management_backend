openapi: "3.0.0"
info:
  version: "1.0.0"
  title: "Bulk Email sender(updated)"
  description: "Send bluk email with scheduling system."

servers:
  - url: "{baseURL}"
    description: Server link
    variables:
      baseURL:
        default: http://0.0.0.0:8000

paths:
  /api/account/v1/register/:
    summary: Register user
    post:
      summary: "Registration"
      description: Register a user by providing required information
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: antu
                email:
                  type: string
                  example: antusaha990@gmail.com
                username:
                  type: string
                  example: antu
                password:
                  type: string
                  example: aaaa1122dd
                remember_me:
                  type: boolean
                  example: true
              required:
                - name
                - email
                - username
                - password
      responses:
        "201":
          description: "200"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessAuthResponse"

        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedAuthResponse"

  /api/account/v1/login/:
    summary: Login user
    post:
      summary: "Login"
      description: Login a user by providing required information
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  example: antusaha
                password:
                  type: string
                  example: aaaaaaa1
                remember_me:
                  type: boolean
                  example: true
              required:
                - username
                - password
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessAuthResponse"
        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedAuthResponse"

  /api/account/v1/token/refresh/:
    summary: Rfreash token
    post:
      summary: "Rfreash Token"
      description: Get new token with refreash token

      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedAuthResponse"
  /api/account/v1/logout/:
    summary: "Logout from existing account"
    delete:
      security:
        - TokenAuth: []
      summary: Logout from account
      description: Logout from your existing account
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: success
                  detail:
                    type: string
                    example: Successfully logged out
                required:
                  - code
                  - status
                  - message
                  - detail
        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
  /api/account/v1/forget_password/:
    summary: "Forget password"
    post:
      summary: "Send OTP"
      description: "Send OTP to the valid user email for reset password"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: antusaha990@gmail.com
              required:
                - email

      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - "success"
                      - "failed"
                    example: "success"
                  details:
                    type: string
                    example: "OTP send successful"
                required:
                  - status
                  - details
        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"

  /api/account/v1/verify_otp/:
    summary: Veryfy otp
    post:
      summary: Verify OTP
      description: Verify the OTP for reseting the password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                OTP:
                  type: integer
                  example: 558899
                email:
                  type: string
                  example: antusaha990@gmail.com
              required:
                - OTP
                - email
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - "success"
                      - "failed"
                    example: "success"
                  can_change_pass:
                    type: boolean
                    example: true
                  token:
                    type: string
                    example: "adfglkjteojpoj"
                  details:
                    type: string
                    example:
                required:
                  - status
                  - can_change_pass
                  - details
                  - token
        "400":
          description: "400"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    enum:
                      - "success"
                      - "failed"
                    example: "failed"
                  can_change_pass:
                    type: boolean
                    example: false
                  details:
                    type: string
                    example: OTP didn't match
                required:
                  - status
                  - can_change_pass
                  - details
  /api/account/v1/view_all_users/:
    description: view all the users
    get:
      description: view all users
      summary: View all users
      security:
        - TokenAuth: []
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  example: { "id": 1, "first_name": "Antu Saha" }
        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"

        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

  /api/account/v1/reset_password/:
    summary: "Reset password or change password"
    post:
      summary: Reset password
      description: Reset password after OTP verification

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: antusaha990@gmail.com
                password:
                  type: string
                  example: aaa1122bb
                token:
                  type: string
                  example: adlkfjdkljfdjf
              required:
                - email
                - password
                - example

      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/SuccessAuthResponse"
        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FailedAuthResponse"

    patch:
      security:
        - TokenAuth: []

      summary: Change user password
      description: Change current user password
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                current_password:
                  type: string
                  example: abcd123
                new_password:
                  type: string
                  example: root12445
                confirm_password:
                  type: string
                  example: root12445
              required:
                - current_password
                - new_password
                - confirm_password
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"

        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

  /api/club/v1/clubs/:
    summary: Register club
    post:
      summary: Register a club
      description: Create a club with a valid name
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Golpokhota club
              required:
                - name
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: integer
                    example: 10
                  name:
                    type: string
                    example: Golpokhota club
                required:
                  - name
                  - id
        "400":
          description: "400"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    properties:
                      name:
                        type: array
                        items:
                          type: string
                        example: ["name already taken"]
                required:
                  - errors
    get:
      summary: Get all club
      description: Get all registered club
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        name:
                          type: string
                          example: Golpokhota club
                        id:
                          type: integer
                          example: 10
                      required:
                        - name
                        - id
                required:
                  - data

  /api/member/v1/members/:
    summary: Members created in club
    post:
      summary: Members created in club
      description: create a member in club
      security:
        - TokenAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                member_ID:
                  type: string

                first_name:
                  type: string

                last_name:
                  type: string

                gender:
                  type: string

                date_of_birth:
                  type: string
                  format: date

                batch_number:
                  type: string

                anniversary_date:
                  type: string
                  format: date

                profile_photo:
                  type: string
                  format: binary

                blood_group:
                  type: string
                  enum:
                    - A+
                    - A-
                    - B+
                    - B-
                    - AB+
                    - AB-
                    - O+
                    - O-
                    - UNKNOWN

                nationality:
                  type: string

                membership_type:
                  type: string

                institute_name:
                  type: string

                membership_status:
                  type: string

                marital_status:
                  type: string

                membership_fee:
                  type: number
                  format: float

                payment_received:
                  type: number
                  format: float

                membership_fee_remaining:
                  type: number
                  format: float

                subscription_fee:
                  type: number
                  format: float

                dues_limit:
                  type: number
                  format: float

                initial_payment_doc:
                  type: string
                  format: binary

              required:
                - member_ID
                - first_name
                - gender
                - date_of_birth
                - profile_photo
                - membership_type
                - institute_name
                - membership_status
                - marital_status
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object

                  status:
                    type: string
                    description: created
                    enum:
                      - created
                      - updated
                      - deleted
                      - failed
                required:
                  - data
                  - status

        "400":
          description: "400"
          content:
            application/json:
              schema:
                type: object

                properties:
                  errors:
                    type: object
                    properties:
                      club:
                        $ref: "#/components/schemas/StringArray"

                      member_ID:
                        $ref: "#/components/schemas/StringArray"

                      first_name:
                        $ref: "#/components/schemas/StringArray"

                      last_name:
                        $ref: "#/components/schemas/StringArray"
                      gender:
                        $ref: "#/components/schemas/StringArray"
                      date_of_birth:
                        $ref: "#/components/schemas/StringArray"
                      batch_number:
                        $ref: "#/components/schemas/StringArray"
                      anniversary_date:
                        $ref: "#/components/schemas/StringArray"
                      profile_photo:
                        $ref: "#/components/schemas/StringArray"
                      blood_group:
                        $ref: "#/components/schemas/StringArray"
                      nationality:
                        $ref: "#/components/schemas/StringArray"
                      membership_type:
                        $ref: "#/components/schemas/StringArray"
                      institute_name:
                        $ref: "#/components/schemas/StringArray"
                      membership_status:
                        $ref: "#/components/schemas/StringArray"
                      marital_status:
                        $ref: "#/components/schemas/StringArray"
                      membership_fee:
                        $ref: "#/components/schemas/StringArray"
                      payment_received:
                        $ref: "#/components/schemas/StringArray"
                      membership_fee_remaining:
                        $ref: "#/components/schemas/StringArray"
                      subscription_fee:
                        $ref: "#/components/schemas/StringArray"
                      dues_limit:
                        $ref: "#/components/schemas/StringArray"
                      initial_payment_doc:
                        $ref: "#/components/schemas/StringArray"
                  status:
                    type: string
                    description: failed
                    enum:
                      - created
                      - updated
                      - deleted
                      - failed
                required:
                  - errors
                  - status

        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "500":
          description: "500"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"

  /api/member/v1/members/{member_id}/:
    patch:
      summary: Update member
      description: Update created member
      parameters:
        - name: member_id
          in: path
          required: true
          schema:
            type: string
          description: unique identifier of member
      security:
        - TokenAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                member_ID:
                  type: string

                first_name:
                  type: string

                last_name:
                  type: string

                gender:
                  type: string

                date_of_birth:
                  type: string
                  format: date

                batch_number:
                  type: string

                anniversary_date:
                  type: string
                  format: date

                profile_photo:
                  type: string
                  format: binary

                blood_group:
                  type: string
                  enum:
                    - A+
                    - A-
                    - B+
                    - B-
                    - AB+
                    - AB-
                    - O+
                    - O-
                    - UNKNOWN

                nationality:
                  type: string

                membership_type:
                  type: string

                institute_name:
                  type: string

                membership_status:
                  type: string

                marital_status:
                  type: string

                membership_fee:
                  type: number
                  format: float

                payment_received:
                  type: number
                  format: float

                membership_fee_remaining:
                  type: number
                  format: float

                subscription_fee:
                  type: number
                  format: float

                dues_limit:
                  type: number
                  format: float

                initial_payment_doc:
                  type: string
                  format: binary

              required:
                - member_ID
                - first_name
                - gender
                - date_of_birth
                - profile_photo
                - membership_type
                - institute_name
                - membership_status
                - marital_status
      responses:
        "200":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object

                  status:
                    type: string
                    example: updated
                    enum:
                      - created
                      - updated
                      - deleted
                      - failed
                required:
                  - data
                  - status

        "400":
          description: "400"
          content:
            application/json:
              schema:
                type: object

                properties:
                  errors:
                    type: object
                    properties:
                      club:
                        $ref: "#/components/schemas/StringArray"

                      member_ID:
                        $ref: "#/components/schemas/StringArray"

                      first_name:
                        $ref: "#/components/schemas/StringArray"

                      last_name:
                        $ref: "#/components/schemas/StringArray"
                      gender:
                        $ref: "#/components/schemas/StringArray"
                      date_of_birth:
                        $ref: "#/components/schemas/StringArray"
                      batch_number:
                        $ref: "#/components/schemas/StringArray"
                      anniversary_date:
                        $ref: "#/components/schemas/StringArray"
                      profile_photo:
                        $ref: "#/components/schemas/StringArray"
                      blood_group:
                        $ref: "#/components/schemas/StringArray"
                      nationality:
                        $ref: "#/components/schemas/StringArray"
                      membership_type:
                        $ref: "#/components/schemas/StringArray"
                      institute_name:
                        $ref: "#/components/schemas/StringArray"
                      membership_status:
                        $ref: "#/components/schemas/StringArray"
                      marital_status:
                        $ref: "#/components/schemas/StringArray"
                      membership_fee:
                        $ref: "#/components/schemas/StringArray"
                      payment_received:
                        $ref: "#/components/schemas/StringArray"
                      membership_fee_remaining:
                        $ref: "#/components/schemas/StringArray"
                      subscription_fee:
                        $ref: "#/components/schemas/StringArray"
                      dues_limit:
                        $ref: "#/components/schemas/StringArray"
                      initial_payment_doc:
                        $ref: "#/components/schemas/StringArray"
                  status:
                    type: string
                    description: failed
                    enum:
                      - created
                      - updated
                      - deleted
                      - failed
                required:
                  - errors
                  - status

        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "404":
          description: "404"
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: "No member match given query"
                required:
                  - detail
        "500":
          description: "500"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
    delete:
      summary: delete member
      description: Delete a member
      parameters:
        - name: member_id
          in: path
          required: true
          schema:
            type: string
          description: unique identifier of member
      security:
        - TokenAuth: []
      responses:
        "204":
          description: "204"
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Member deleted
                  status:
                    type: string
                    example: deleted
                    enum:
                      - created
                      - updated
                      - deleted
                      - failed
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "404":
          description: "404"
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: "No member match given query"
                required:
                  - detail
        "400":
          description: "400"
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: member already deleted
                  status:
                    type: string
                    example: failed
                    enum:
                      - created
                      - updated
                      - deleted
                      - failed
                required:
                  - detail
                  - status
        "500":
          description: "500"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
    get:
      summary: Get a specific member
      description: Get a specific member information with member id
      parameters:
        - name: member_id
          in: path
          required: true
          schema:
            type: string
          description: Unique identifier of member
      security:
        - TokenAuth: []
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                required:
                  - data
        "404":
          description: "404"
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: No member match given query
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

  /api/member/v1/members/get_latest_id/:
    post:
      summary: Get member latest id
      description: Get member latest id
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                membership_type:
                  type: string
                  example: BM
                institute_name:
                  type: string
                  example: Bramonbaria Polytechnic Institute

              required:
                - membership_type
                - institute_name

      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  new_generated_id:
                    type: string
                    example: "BM0001-BPPI"
                required:
                  - new_generated_id
        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"

        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "500":
          description: "500"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"

  /api/core/v1/membership_type/:
    summary: create a membershiip_type
    post:
      security:
        - TokenAuth: []
      summary: Create a membership type name
      description: Create a membership type name for add member in a club
      requestBody:
        content:
          application/json:
            schema:
              type: object

              properties:
                name:
                  type: string
                  example: "LM"
              required:
                - name
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: LLM
                  id:
                    type: string
                    example: 1213

                required:
                  - name
                  - id
        "400":
          description: "400"
          content:
            application/json:
              schema:
                type: object

                properties:
                  errors:
                    type: object
                    properties:
                      name:
                        type: array
                        items:
                          type: string
                          example: "something went wrong"
                        # $ref: '#/components/schemas/StringArray'
                required:
                  - errors

        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

    get:
      security:
        - TokenAuth: []
      summary: Retrieve all membership type
      description: Retrieve all membership type
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: "Membership type retrieve successful"
                  status:
                    type: string
                    example: "success"
                  data:
                    type: array
                    items:
                      properties:
                        name:
                          type: string
                          example: LLM
                        id:
                          type: string
                          example: 1213

                      required:
                        - name
                        - id

        "500":
          description: "500"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"

        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

  /api/core/v1/member/membership_type/flexible_id/:
    summary: create a membership type by flexible id
    post:
      security:
        - TokenAuth: []
      summary: create a membershiip_type by flexible id
      description: Create a membershiip_type flexible id for add member in a club
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                member_ID:
                  type: string
                  example: LM000111

                membership_type:
                  type: string
                  example: LM
              required:
                - member_ID
                - membershiip_type
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: "Member with ID lm_001 added by flexible Member Id successfully."
                  status:
                    type: string
                    example: "success"

                required:
                  - code
                  - message
                  - status
        "400":
          description: "400"
          content:
            application/json:
              schema:
                type: object

                properties:
                  code:
                    type: integer
                    example: 400
                  message:
                    type: string
                    example: "Member with ID lm_001 added by flexible Member Id successfully."
                  status:
                    type: string
                    example: "failed"
                  errors:
                    type: object
                    properties:
                      name:
                        type: array
                        items:
                          type: string
                          example: "something went wrong"
                        # $ref: '#/components/schemas/StringArray'
                required:
                  - code
                  - message
                  - status
                  - errors

  /api/core/v1/institute_name/:
    summary: create amd retrieve InstituteName
    post:
      security:
        - TokenAuth: []

      summary: Create InstituteName for add member
      description: create a InstituteName  for add member in a club
      requestBody:
        content:
          application/json:
            schema:
              type: object

              properties:
                name:
                  type: string
                  example: Bramonbaria Polytechnic Institute
                code:
                  type: string
                  example: BPI
              required:
                - name
                - code
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: Bramonbaria Polytechnic Institute
                  id:
                    type: string
                    example: 1213
                  code:
                    type: string
                    example: BPI

                required:
                  - name
                  - id
                  - code
        "400":
          description: "400"
          content:
            application/json:
              schema:
                type: object

                properties:
                  errors:
                    type: object
                    properties:
                      name:
                        $ref: "#/components/schemas/StringArray"
                required:
                  - errors

        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
    get:
      security:
        - TokenAuth: []
      summary: Get all institute names
      description: Retrieve a list of all available institute names
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "Institute names retrieve successful"
                  status:
                    type: string
                    example: "success"
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: string
                          example: "1"
                        name:
                          type: string
                          example: "Bramonbaria Polytechnic Institute"
                    required:
                      - id
                      - name
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"

  /api/core/v1/gender/:
    summary: create a gender
    post:
      security:
        - TokenAuth: []

      summary: Create gender
      description: create gender
      requestBody:
        content:
          application/json:
            schema:
              type: object

              properties:
                name:
                  type: string
                  example: custom
              required:
                - name
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: male
                  id:
                    type: string
                    example: 1213
                required:
                  - name
                  - id
        "400":
          description: "400"
          content:
            application/json:
              schema:
                type: object

                properties:
                  errors:
                    type: object
                    properties:
                      name:
                        $ref: "#/components/schemas/StringArray"
                required:
                  - errors

        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

    get:
      security:
        - TokenAuth: []

      summary: get all gender
      description: get all gender
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CoreAPIResonseObject"
        "400":
          description: "400"
          content:
            application/json:
              schema:
                type: object

                properties:
                  errors:
                    type: object
                    properties:
                      name:
                        $ref: "#/components/schemas/StringArray"
                required:
                  - errors

        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

  /api/core/v1/member_ship_status_choice/:
    summary: create a membership status
    post:
      security:
        - TokenAuth: []

      summary: create a membership status
      description: create a membership status
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: custom
              required:
                - name
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: male
                  id:
                    type: string
                    example: 1213
                required:
                  - name
                  - id
        "400":
          description: "400"
          content:
            application/json:
              schema:
                type: object

                properties:
                  errors:
                    type: object
                    properties:
                      name:
                        $ref: "#/components/schemas/StringArray"
                required:
                  - errors

        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

    get:
      security:
        - TokenAuth: []

      summary: get all member ship status choice
      description: get all member ship status choice
      responses:
        "200":
          description: "201"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CoreAPIResonseObject"
        "400":
          description: "400"
          content:
            application/json:
              schema:
                type: object

                properties:
                  errors:
                    type: object
                    properties:
                      name:
                        $ref: "#/components/schemas/StringArray"
                required:
                  - errors

        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

  /api/core/v1/marital_status_choice/:
    summary: create marital_staus_choice
    post:
      security:
        - TokenAuth: []

      summary: create marital_staus_choice
      description: create marital_staus_choice
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: custom
              required:
                - name
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: male
                  id:
                    type: string
                    example: 1213
                required:
                  - name
                  - id
        "400":
          description: "400"
          content:
            application/json:
              schema:
                type: object

                properties:
                  errors:
                    type: object
                    properties:
                      name:
                        $ref: "#/components/schemas/StringArray"
                required:
                  - errors

        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

    get:
      security:
        - TokenAuth: []

      summary: get all marital_staus_choice
      description: get all marital_staus_choice
      responses:
        "200":
          description: "201"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CoreAPIResonseObject"
        "400":
          description: "400"
          content:
            application/json:
              schema:
                type: object

                properties:
                  errors:
                    type: object
                    properties:
                      name:
                        $ref: "#/components/schemas/StringArray"
                required:
                  - errors

        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

  /api/core/v1/employment_type_choice/:
    summary: create employment_type_choice
    post:
      security:
        - TokenAuth: []

      summary: create employment_type_choice
      description: create employment_type_choice
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: custom
              required:
                - name
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: male
                  id:
                    type: string
                    example: 1213
                required:
                  - name
                  - id
        "400":
          description: "400"
          content:
            application/json:
              schema:
                type: object

                properties:
                  errors:
                    type: object
                    properties:
                      name:
                        $ref: "#/components/schemas/StringArray"
                required:
                  - errors

        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

    get:
      security:
        - TokenAuth: []

      summary: get all employment_type_choice
      description: get all employment_type_choice
      responses:
        "200":
          description: "201"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CoreAPIResonseObject"
        "400":
          description: "400"
          content:
            application/json:
              schema:
                type: object

                properties:
                  errors:
                    type: object
                    properties:
                      name:
                        $ref: "#/components/schemas/StringArray"
                required:
                  - errors

        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

  /api/core/v1/email_type_choice/:
    summary: create email_type_choice
    post:
      security:
        - TokenAuth: []

      summary: create email_type_choice
      description: create email_type_choice
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: custom
              required:
                - name
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: male
                  id:
                    type: string
                    example: 1213
                required:
                  - name
                  - id
        "400":
          description: "400"
          content:
            application/json:
              schema:
                type: object

                properties:
                  errors:
                    type: object
                    properties:
                      name:
                        $ref: "#/components/schemas/StringArray"
                required:
                  - errors

        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

    get:
      security:
        - TokenAuth: []

      summary: get all email_type_choice
      description: get all email_type_choice
      responses:
        "200":
          description: "201"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CoreAPIResonseObject"
        "400":
          description: "400"
          content:
            application/json:
              schema:
                type: object

                properties:
                  errors:
                    type: object
                    properties:
                      name:
                        $ref: "#/components/schemas/StringArray"
                required:
                  - errors

        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

  /api/core/v1/contact_type_choice/:
    summary: create contact_type_choice
    post:
      security:
        - TokenAuth: []

      summary: create contact_type_choice
      description: create contact_type_choice
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: custom
              required:
                - name
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: male
                  id:
                    type: string
                    example: 1213
                required:
                  - name
                  - id
        "400":
          description: "400"
          content:
            application/json:
              schema:
                type: object

                properties:
                  errors:
                    type: object
                    properties:
                      name:
                        $ref: "#/components/schemas/StringArray"
                required:
                  - errors

        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

    get:
      security:
        - TokenAuth: []

      summary: get all contact_type_choice
      description: get all contact_type_choice
      responses:
        "200":
          description: "201"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CoreAPIResonseObject"
        "400":
          description: "400"
          content:
            application/json:
              schema:
                type: object

                properties:
                  errors:
                    type: object
                    properties:
                      name:
                        $ref: "#/components/schemas/StringArray"
                required:
                  - errors

        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

  /api/core/v1/address_type_choice/:
    summary: create address_type_choice
    post:
      security:
        - TokenAuth: []

      summary: create address_type_choice
      description: create address_type_choice
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: custom
              required:
                - name
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: male
                  id:
                    type: string
                    example: 1213
                required:
                  - name
                  - id
        "400":
          description: "400"
          content:
            application/json:
              schema:
                type: object

                properties:
                  errors:
                    type: object
                    properties:
                      name:
                        $ref: "#/components/schemas/StringArray"
                required:
                  - errors

        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

    get:
      security:
        - TokenAuth: []

      summary: get all address_type_choice
      description: get all address_type_choice
      responses:
        "200":
          description: "201"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CoreAPIResonseObject"
        "400":
          description: "400"
          content:
            application/json:
              schema:
                type: object

                properties:
                  errors:
                    type: object
                    properties:
                      name:
                        $ref: "#/components/schemas/StringArray"
                required:
                  - errors

        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

  /api/core/v1/document_type_choice/:
    summary: create document_type_choice
    post:
      security:
        - TokenAuth: []

      summary: create document_type_choice
      description: create document_type_choice
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: custom
              required:
                - name
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: male
                  id:
                    type: string
                    example: 1213
                required:
                  - name
                  - id
        "400":
          description: "400"
          content:
            application/json:
              schema:
                type: object

                properties:
                  errors:
                    type: object
                    properties:
                      name:
                        $ref: "#/components/schemas/StringArray"
                required:
                  - errors

        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

    get:
      security:
        - TokenAuth: []

      summary: get all document_type_choice
      description: get all document_type_choice
      responses:
        "200":
          description: "201"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CoreAPIResonseObject"
        "400":
          description: "400"
          content:
            application/json:
              schema:
                type: object

                properties:
                  errors:
                    type: object
                    properties:
                      name:
                        $ref: "#/components/schemas/StringArray"
                required:
                  - errors

        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

  /api/core/v1/spouse_status_type_choice/:
    summary: create spouse_status_type_choice
    post:
      security:
        - TokenAuth: []

      summary: create spouse_status_type_choice
      description: create spouse_status_type_choice
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: custom
              required:
                - name
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: male
                  id:
                    type: string
                    example: 1213
                required:
                  - name
                  - id
        "400":
          description: "400"
          content:
            application/json:
              schema:
                type: object

                properties:
                  errors:
                    type: object
                    properties:
                      name:
                        $ref: "#/components/schemas/StringArray"
                required:
                  - errors

        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

    get:
      security:
        - TokenAuth: []

      summary: get all spouse_status_type_choice
      description: get all spouse_status_type_choice
      responses:
        "200":
          description: "201"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CoreAPIResonseObject"
        "400":
          description: "400"
          content:
            application/json:
              schema:
                type: object

                properties:
                  errors:
                    type: object
                    properties:
                      name:
                        $ref: "#/components/schemas/StringArray"
                required:
                  - errors

        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

  /api/core/v1/descendant_relation_type_choice/:
    summary: create descendant_relation_type_choice
    post:
      security:
        - TokenAuth: []

      summary: create descendant_relation_type_choice
      description: create descendant_relation_type_choice
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: custom
              required:
                - name
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: string
                    example: male
                  id:
                    type: string
                    example: 1213
                required:
                  - name
                  - id
        "400":
          description: "400"
          content:
            application/json:
              schema:
                type: object

                properties:
                  errors:
                    type: object
                    properties:
                      name:
                        $ref: "#/components/schemas/StringArray"
                required:
                  - errors

        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

    get:
      security:
        - TokenAuth: []

      summary: get all descendant_relation_type_choice
      description: get all descendant_relation_type_choice
      responses:
        "200":
          description: "201"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/CoreAPIResonseObject"
        "400":
          description: "400"
          content:
            application/json:
              schema:
                type: object

                properties:
                  errors:
                    type: object
                    properties:
                      name:
                        $ref: "#/components/schemas/StringArray"
                required:
                  - errors

        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

  /api/account/v1/authorization/group_permissions/:
    summary: create a group which is include permission in the group
    post:
      description: "crate a group with permission"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: modarator
                permission:
                  type: array
                  items:
                    type: integer
                    example: [1, 2, 3]

              required:
                - name
                - permission

      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  group_id:
                    type: integer
                    example: 12
                  name:
                    type: string
                    example: modarator
                  permission:
                    type: array
                    items:
                      example: [1, 2, 3]

                required:
                  - group_id
                  - name
                  - permission
        "400":
          description: "400"
          content:
            application/json:
              schema:
                type: object

                properties:
                  errors:
                    type: object
                    properties:
                      name:
                        $ref: "#/components/schemas/StringArray"
                required:
                  - errors

        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
    get:
      summary: Get all avaiable groups
      description: Get all the avaiable groups
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                required:
                  - data
    delete:
      summary: Detele specific permission from group
      description: remove specific permission from specific group if group permisson is exists
      security:
        - TokenAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                group:
                  type: integer
                  example: 1
                permission:
                  type: integer
                  example: 1
              required:
                - group
                - permission
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Operation successful
                  detail:
                    type: string
                    example: Permission deleted successfully

                required:
                  - code
                  - status
                  - message
                  - detail
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "500":
          description: "500"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"

  /api/account/v1/authorization/group_permissions/{group_id}/:
    summary: "Update or Delete a spcific group"
    patch:
      description: "Update a group"
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: string
          description: unique identifier of member
      security:
        - TokenAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: modarator
                permission:
                  type: array
                  items:
                    type: integer
                    example: 1

              required:
                - name
                - permission

      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      schema:
                        type: object
                        properties:
                          name:
                            type: string
                            example: modarator
                          permission:
                            type: array
                            items:
                              type: integer
                              example: 1
                        required:
                          - name
                          - permission
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
    delete:
      description: Delete a specific group
      parameters:
        - name: group_id
          in: path
          required: true
          schema:
            type: string
          description: unique identifier of member
      security:
        - TokenAuth: []
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: Group deleted
                required:
                  - detail
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
  /api/account/v1/authorization/custom_permission_name/:
    summary: set custom permission name
    description: set new custom permission name
    get:
      security:
        - TokenAuth: []
      summary: get all permission name
      description: get all permission name avalialbe
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    name:
                      type: string
                      example: "member operations"
                  required:
                    - id
                    - name
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

    post:
      security:
        - TokenAuth: []
      summary: create a new permission
      description: create a new permission
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "add member"
              required:
                - name
      responses:
        "201":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    example: 1
                  name:
                    type: string
                    example: "Add member"
                required:
                  - name
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

  /api/account/v1/authorization/assign_group_user/:
    summary: This endpoint allows assigning, updating, deleting user groups, and retrieving all users in a group.
    post:
      security:
        - TokenAuth: []
      description: assing user in a group

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: integer
                  example: 1
                group:
                  type: array
                  items:
                    type: integer
                    example: 1,2
              required:
                - user
                - group

      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: integer
                    example: 1
                  groups:
                    type: array
                    items:
                      type: object

                      properties:
                        group_id:
                          type: integer
                          example: 1
                        group_name:
                          type: string
                          example: modarator

                      required:
                        - group_id
                        - group_name
                required:
                  - user_id
                  - groups
        "400":
          description: "400"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    properties:
                      name:
                        $ref: "#/components/schemas/StringArray"
                required:
                  - errors

        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
    get:
      description: Retrieve all users and their assigned groups.
      security:
        - TokenAuth: []

      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        user:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 2
                            username:
                              type: string
                              example: salauddin
                            email:
                              type: string
                              example: ahmedsalauddin677785@gmail.com
                          required:
                            - id
                            - username
                            - email
                        groups:
                          type: array
                          items:
                            type: object
                            properties:
                              id:
                                type: integer
                                example: 12
                              name:
                                type: string
                                example: modarator

                              permission:
                                type: array
                                items:
                                  type: object
                                  properties:
                                    id:
                                      type: integer
                                      example: 2
                                    name:
                                      type: string
                                      example: add_member
                                  required:
                                    - id
                                    - name
                                    - permission
                      required:
                        - user
                        - groups

                required:
                  - data

        "500":
          description: "500"
          content:
            application/json:
              schema:
                type: object

                properties:
                  errors:
                    type: object
                    properties:
                      name:
                        $ref: "#/components/schemas/InternalServerError"
                required:
                  - errors

        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
    delete:
      description: "Delete a user from the group"
      security:
        - TokenAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user_id:
                  type: integer
                  example: 1
                group_id:
                  type: integer
                  example: 1
              required:
                - user_id
                - group_id
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  detail:
                    type: string
                    example: "User has been deleted from the group"
                required:
                  - detail
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
    patch:
      description: Update a user and assign them to another group.
      security:
        - TokenAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                user:
                  type: integer
                  example: 2
                group:
                  type: array
                  items:
                    type: integer
                    example: 1,2,3
              required:
                - user
                - group
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  user_id:
                    type: integer
                    example: 2
                  updated_groups:
                    type: array
                    items:
                      type: object
                      properties:
                        group_id:
                          type: integer
                          example: 1
                        group_name:
                          type: string
                          example: "modarator"
                      required:
                        - group_id
                        - group_name
                required:
                  - user_id
                  - updated_groups
        "400":
          description: "400"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    properties:
                      name:
                        $ref: "#/components/schemas/StringArray"
                required:
                  - errors
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

  /api/account/v1/authorization/admin_user_email/:
    summary: An admin enters a user's email to register them in a club.
    description: This endpoint allows an admin to enter a user's email to initiate the registration process for a specific club. The system validates the email and sends a One-Time Password (OTP) to the provided email address for verification.

    post:
      description: Allows an admin to submit a user's email for club registration. Sends an OTP for verification if the email is valid.
      security:
        - TokenAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: ahmedsalauddin677785@gmail.com
              required:
                - email
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: OTP sent successfully
                  to:
                    type: object
                    properties:
                      email:
                        type: string
                        example: ahmedsalauddin677785@gmail.com
                    required:
                      - email
                required:
                  - message
                  - to
        "400":
          description: "400"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    properties:
                      club:
                        $ref: "#/components/schemas/StringArray"
                      email:
                        $ref: "#/components/schemas/StringArray"
                    required:
                      - club
                      - email
                required:
                  - errors
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

  /api/account/v1/authorization/admin_user_verify_otp/:
    summary: An admin enters user's email and otp for verification.
    description: This endpoint allows an admin to verify a user's email by entering the OTP sent to the provided email address. If the OTP is valid, the user's email is confirmed, allowing them to proceed with the registration process.
    post:
      security:
        - TokenAuth: []
      description: Allows an admin to varify users email and otp for club registration.

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: ahmedsalauddin677785@gmail.com
                otp:
                  type: integer
                  example: 3233
              required:
                - email
                - otp
      responses:
        "201":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: Passed
                  email:
                    type: string
                    example: ahmedsalauddin677785@gmail.com

                required:
                  - status
                  - email
        "400":
          description: "400"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    properties:
                      club:
                        $ref: "#/components/schemas/StringArray"
                      email:
                        $ref: "#/components/schemas/StringArray"
                      otp:
                        $ref: "#/components/schemas/StringArray"
                    required:
                      - club
                      - email
                      - otp
                required:
                  - errors
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

  /api/account/v1/authorization/admin_user_register/:
    summary: An admin enters user's details for registration in a club.
    description: This endpoint allows an admin to users register in club by their details.if users email is already verified assume users is valid otherwise not allow for register in a club.
    post:
      security:
        - TokenAuth: []
      description: Allows an admin enters user details  for club registration.

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: ahmedsalauddin677785@gmail.com
                name:
                  type: string
                  example: salauddin
                username:
                  type: string
                  example: salauddin85
                password:
                  type: string
                  example: root2580#

              required:
                - email
                - username
                - name
                - password

      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success

                  username:
                    type: string
                    example: salauddin85

                required:
                  - status
                  - username
        "400":
          description: "400"
          content:
            application/json:
              schema:
                type: object
                properties:
                  errors:
                    type: object
                    properties:
                      club:
                        $ref: "#/components/schemas/StringArray"
                      email:
                        $ref: "#/components/schemas/StringArray"
                      name:
                        $ref: "#/components/schemas/StringArray"
                      username:
                        $ref: "#/components/schemas/StringArray"
                      password:
                        $ref: "#/components/schemas/StringArray"

                    required:
                      - club
                      - email
                      - name
                      - username
                      - password
                required:
                  - errors
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

  /api/account/v1/authorization/get_user_all_permissions/:
    description: Get all user permission
    get:
      summary: Get a specific user permission
      description: Get list of permission for a specific user
      security:
        - TokenAuth: []
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    example: {}
                required:
                  - data
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

  /api/account/v1/authorization/groups/{id}/:
    get:
      summary: View full group details
      description: View full group details with it's users
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string

      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Viwing a group detail
                  data:
                    type: object
                required:
                  - code
                  - status
                  - message
                  - data

  /api/activity_log/v1/activity/user_activity/:
    get:
      summary: Retrieve User Activity Logs
      security:
        - TokenAuth: []
      parameters:
        - name: page
          in: query
          description: The page number to retrieve.
          required: false
          schema:
            type: integer
            example: 1

        - name: page_size
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: integer
            example: 10

      description: Allows an authenticated user to retrieve their own activity log data. If the user is an admin, they receive more detailed logs.
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "User retrieved logged data successfully"
                  status:
                    type: string
                    example: "success"
                  data:
                    oneOf:
                      - $ref: "#/components/schemas/NormalUserActivityLog"
                      - $ref: "#/components/schemas/AdminUserActivityLog"
                  pagination:
                    $ref: "#/components/schemas/Pagination"

                required:
                  - code
                  - message
                  - status
                  - data
                  - pagination
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

        "500":
          description: "500"
          content:
            application/json:
              schema:
                type: object

                properties:
                  errors:
                    type: object
                    properties:
                      name:
                        $ref: "#/components/schemas/InternalServerError"
                required:
                  - errors

  /api/activity_log/v1/activity/all_user_activity/:
    get:
      summary: Retrieve all user Activity Logs
      security:
        - TokenAuth: []
      parameters:
        - name: page
          in: query
          description: The page number to retrieve.
          required: false
          schema:
            type: integer
            example: 1

        - name: page_size
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: integer
            example: 10

      description: Allows an  authenticated admin to retrieve all user activity log data.
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "User retrieved logged data successfully"
                  status:
                    type: string
                    example: "success"
                  data:
                    $ref: "#/components/schemas/AdminUserActivityLog"
                  pagination:
                    $ref: "#/components/schemas/Pagination"

                required:
                  - code
                  - message
                  - status
                  - data
                  - pagination

        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

        "500":
          description: "500"
          content:
            application/json:
              schema:
                type: object

                properties:
                  errors:
                    type: object
                    properties:
                      name:
                        $ref: "#/components/schemas/InternalServerError"
                required:
                  - errors

  /api/member/v1/members/contact_numbers/:
    post:
      summary: Add member contact numbers
      description: Add member contact numbers for a specific member while registration. You can add multiple Member contact number
      security:
        - TokenAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                member_ID:
                  type: string
                  example: LM1111
                data:
                  type: array
                  items:
                    type: object
                    properties:
                      contact_type:
                        type: number
                        example: 1111
                      number:
                        type: number
                        example: 111
                      is_primary:
                        type: boolean
                        example: false
                    required:
                      - contact_type
                      - number
                      - is_primary
              required:
                - member_ID
                - data
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 201
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Member contact number added"
                  data:
                    type: array
                    items:
                      type: object
                required:
                  - code
                  - status
                  - message
                  - data

  /api/member/v1/members/contact_numbers/{member_ID}/:
    patch:
      summary: Update member contact numbers
      description: Update member contact numbers for a specific member. You can update multiple Member contact number
      security:
        - TokenAuth: []
      parameters:
        - name: member_ID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                member_ID:
                  type: string
                  example: LM1111
                data:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      contact_type:
                        type: number
                        example: 1111
                      number:
                        type: number
                        example: 111
                      is_primary:
                        type: boolean
                        example: false
                    required:
                      - contact_type
                      - number
                      - is_primary
                      - id
              required:
                - member_ID
                - data
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 201
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Member contact number added"
                  data:
                    type: array
                    items:
                      type: object
                required:
                  - code
                  - status
                  - message
                  - data

  /api/member/v1/members/email_address/:
    post:
      summary: Add member Email address
      description: Add member Email address for a specific member while registration. You can add multiple Member contact number
      security:
        - TokenAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                member_ID:
                  type: string
                  example: LM1111
                data:
                  type: array
                  items:
                    type: object
                    properties:
                      email_type:
                        type: number
                        example: 1111
                      email:
                        type: string
                        example: a2gmail.com
                      is_primary:
                        type: boolean
                        example: false
                    required:
                      - email_type
                      - email
                      - is_primary
              required:
                - member_ID
                - data
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 201
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Member contact number added"
                  data:
                    type: array
                    items:
                      type: object
                required:
                  - code
                  - status
                  - message
                  - data

  /api/member/v1/members/email_address/{member_ID}/:
    patch:
      summary: Update member email addresses
      description: Update member email address for a specific member. You can update multiple Member email address
      security:
        - TokenAuth: []
      parameters:
        - name: member_ID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                member_ID:
                  type: string
                  example: LM1111
                data:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      email_type:
                        type: number
                        example: 1111
                      email:
                        type: string
                        example: a2gmail.com
                      is_primary:
                        type: boolean
                        example: false
                    required:
                      - email_type
                      - email
                      - is_primary
                      - id
              required:
                - member_ID
                - data

      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 201
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Member contact number added"
                  data:
                    type: array
                    items:
                      type: object
                required:
                  - code
                  - status
                  - message
                  - data

  /api/member/v1/members/address/:
    post:
      summary: Add member address
      description: Add member address for a specific member while registration. You can add multiple Member contact number
      security:
        - TokenAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                member_ID:
                  type: string
                  example: LM1111
                data:
                  type: array
                  items:
                    type: object
                    properties:
                      address_type:
                        type: number
                        example: 1111
                      address:
                        type: string
                        example: feni
                      is_primary:
                        type: boolean
                        example: false
                    required:
                      - address_type
                      - address
                      - is_primary
              required:
                - member_ID
                - data
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 201
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Member contact number added"
                  data:
                    type: array
                    items:
                      type: object
                required:
                  - code
                  - status
                  - message
                  - data

  /api/member/v1/members/address/{member_ID}/:
    patch:
      summary: update member address
      description: update member address for a specific member. You can update multiple address
      security:
        - TokenAuth: []
      parameters:
        - name: member_ID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                member_ID:
                  type: string
                  example: LM1111
                data:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      address_type:
                        type: number
                        example: 1111
                      address:
                        type: string
                        example: feni
                      is_primary:
                        type: boolean
                        example: false
                    required:
                      - address_type
                      - address
                      - is_primary
              required:
                - member_ID
                - data
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Member contact number added"
                  data:
                    type: array
                    items:
                      type: object
                required:
                  - code
                  - status
                  - message
                  - data

  /api/member/v1/members/spouse/:
    post:
      summary: Add member spouse
      description: Add member spouse for a specific member while registration.
      security:
        - TokenAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                member_ID:
                  type: string
                  example: LM111
                spouse_name:
                  type: string
                  example: foo
                contact_number:
                  type: number
                  example: 012545687952
                spouse_dob:
                  type: string
                  format: date
                image:
                  type: string
                  format: binary
                current_status:
                  type: integer
                  example: 1
              required:
                - member_ID
                - spouse_name
                - contact_number
                - spouse_dob
                - image
                - current_status

      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 201
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Member contact number added"
                  data:
                    type: array
                    items:
                      type: object
                required:
                  - code
                  - status
                  - message
                  - data

    patch:
      summary: Update member spouse
      description: Update member spouse for a specific member
      security:
        - TokenAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                member_ID:
                  type: string
                  example: LM111
                spouse_name:
                  type: string
                  example: foo
                contact_number:
                  type: number
                  example: 012545687952
                spouse_dob:
                  type: string
                  format: date
                image:
                  type: string
                  format: binary
                current_status:
                  type: integer
                  example: 1
              required:
                - member_ID
                - spouse_name
                - contact_number
                - spouse_dob
                - image
                - current_status
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Spouse updated successfully
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      spouse_id:
                        type: integer
                        example: 1
                    required:
                      - spouse_id
                required:
                  - code
                  - message
                  - status
                  - data
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: Spouse object created successfully
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      spouse_id:
                        type: integer
                        example: 1
                    required:
                      - spouse_id
                required:
                  - code
                  - message
                  - status
                  - data
        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

  /api/member/v1/members/descendants/:
    post:
      summary: Add member descendants
      description: Add member descendants for a specific member while registration. You can add multiple descendants
      security:
        - TokenAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                member_ID:
                  type: string
                  example: LM1111
                name:
                  type: string
                  example: xyz
                descendant_contact_number:
                  type: string
                  example: 01478595
                dob:
                  type: string
                  format: date
                image:
                  type: string
                  format: binary
                relation_type:
                  type: integer
                  example: 123
              required:
                - name
                - descendant_contact_number
                - dob
                - image
                - relation_type
                - member_ID

      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 201
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Member desendants added"
                  data:
                    type: array
                    items:
                      type: object
                required:
                  - code
                  - status
                  - message
                  - data
    patch:
      summary: Update member descendants
      description: Update member descendants for a specific member. You can update multiple descendants
      security:
        - TokenAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                member_ID:
                  type: string
                  example: LM1111
                name:
                  type: string
                  example: xyz
                descendant_contact_number:
                  type: string
                  example: 01478595
                dob:
                  type: string
                  format: date
                image:
                  type: string
                  format: binary
                relation_type:
                  type: integer
                  example: 123
                id:
                  type: integer

              required:
                - name
                - descendant_contact_number
                - dob
                - image
                - relation_type
                - member_ID
                - id

      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Member desendants added"
                  data:
                    type: array
                    items:
                      type: object
                required:
                  - code
                  - status
                  - message
                  - data

  /api/member/v1/members/job/:
    post:
      summary: Add member Job information
      description: Add member job information for a specific member while registration.
      security:
        - TokenAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                member_ID:
                  type: string
                  example: LM0001
                data:
                  type: array
                  items:
                    type: object
                    properties:
                      title:
                        type: string
                        example: Engineer
                      organization_name:
                        type: string
                        example: PeopleTEk
                      location:
                        type: string
                        example: Dhaka
                    required:
                      - title
                      - organization_name
                      - location
              required:
                - member_ID
                - data
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 201
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Member contact number added"
                  data:
                    type: array
                    items:
                      type: object
                required:
                  - code
                  - status
                  - message
                  - data

  /api/member/v1/members/job/{member_ID}/:
    patch:
      summary: Update member job information
      description: Update member job information for a specific member

      security:
        - TokenAuth: []
      parameters:
        - name: member_ID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                member_ID:
                  type: string
                  example: LM0001
                data:
                  type: array
                  items:
                    type: object
                    properties:
                      title:
                        type: string
                        example: Engineer
                      organization_name:
                        type: string
                        example: PeopleTEk
                      location:
                        type: string
                        example: Dhaka
                    required:
                      - title
                      - organization_name
                      - location
              required:
                - member_ID
                - data
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Member job has been updated successfully
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      job_id:
                        type: integer
                        example: 1
                    required:
                      - job_id
                required:
                  - code
                  - message
                  - status
                  - data
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: Member job has been created successfully
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      job_id:
                        type: integer
                        example: 1
                    required:
                      - job_id
                required:
                  - code
                  - message
                  - status
                  - data
        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "500":
          description: "500"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"

  /api/member/v1/members/emergency_contact/:
    post:
      summary: Add member Emgergency contact
      description: Add member Emergency contact for a specific member while registration.
      security:
        - TokenAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                member_ID:
                  type: string
                  example: LM0001
                data:
                  type: array
                  items:
                    type: object
                    properties:
                      contact_name:
                        type: string
                        example: puja
                      contact_number:
                        type: string
                        example: 0147586957
                      relation_with_member:
                        type: string
                        example: brother
                    required:
                      - contact_name
                      - contact_number
                      - relation_with_member
              required:
                - member_ID
                - data
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 201
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Member contact number added"
                  data:
                    type: array
                    items:
                      type: object
                required:
                  - code
                  - status
                  - message
                  - data

  /api/member/v1/members/emergency_contact/{member_ID}/:
    patch:
      summary: Update member Emgergency contact
      description: Update member Emergency contact for a specific member.
      security:
        - TokenAuth: []
      parameters:
        - name: member_ID
          in: path
          required: true
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                member_ID:
                  type: string
                  example: LM0001
                contact_name:
                  type: string
                  example: puja
                contact_number:
                  type: string
                  example: 0147586957
                relation_with_member:
                  type: string
                  example: brother
              required:
                - contact_name
                - contact_number
                - relation_with_member
                - member_ID
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 200
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Member contact number added"
                  data:
                    type: array
                    items:
                      type: object
                required:
                  - code
                  - status
                  - message
                  - data

  /api/member/v1/members/companion/:
    post:
      summary: Add member companion
      description: Add member companion for a specific member while registration.
      security:
        - TokenAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                member_ID:
                  type: string
                  example: LM111
                companion_name:
                  type: string
                  example: foo
                companion_dob:
                  type: string
                  format: date
                companion_contact_number:
                  type: string
                  example: 01475869555
                companion_card_number:
                  type: string
                  example: 12458
                relation_with_member:
                  type: string
                  example: brother
                companion_image:
                  type: string
                  format: binary
              required:
                - member_ID
                - companion_name
                - companion_dob
                - companion_contact_number
                - companion_card_number
                - relation_with_member
                - companion_image

      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 201
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Member contact number added"
                  data:
                    type: array
                    items:
                      type: object
                required:
                  - code
                  - status
                  - message
                  - data
    patch:
      summary: Update member companion
      description: Update member companion for a specific member
      security:
        - TokenAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                member_ID:
                  type: string
                  example: LM111
                companion_name:
                  type: string
                  example: foo
                companion_dob:
                  type: string
                  format: date
                companion_contact_number:
                  type: string
                  example: 01475869555
                companion_card_number:
                  type: string
                  example: 12458
                relation_with_member:
                  type: string
                  example: brother
                companion_image:
                  type: string
                  format: binary
              required:
                - member_ID
                - companion_name
                - companion_image
                - companion_card_number
                - relation_with_member
                - companion_contact_number
                - companion_dob
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Member companion has been updated successfully
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      companion_id:
                        type: integer
                        example: 1
                    required:
                      - companion_id
                required:
                  - code
                  - message
                  - status
                  - data
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: Member companion has been created successfully
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      companion_id:
                        type: integer
                        example: 1
                    required:
                      - companion_id
                required:
                  - code
                  - message
                  - status
                  - data
        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

  /api/member/v1/members/documents/:
    post:
      summary: Add member documents
      description: Add member decuments for a specific member while registration.
      security:
        - TokenAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                member_ID:
                  type: string
                  example: LM111
                document_document:
                  type: string
                  format: binary
                document_type:
                  type: integer
                  example: 11
              required:
                - member_ID
                - document_document
                - document_type

      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: number
                    example: 201
                  status:
                    type: string
                    example: "success"
                  message:
                    type: string
                    example: "Member contact number added"
                  data:
                    type: array
                    items:
                      type: object
                required:
                  - code
                  - status
                  - message
                  - data

    get:
      summary: Retrieve all member documents
      description: Fetches all member documents with pagination.

      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Member documents retrieved successfully
                  status:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        document_number:
                          type: string
                          nullable: true
                          example: null
                        document_document:
                          type: string
                          format: uri
                          example: /media/credentials/kevin-mueller--1WEHdcFYUE-unsplash.jpg
                        created_at:
                          type: string
                          format: date-time
                          example: 2025-04-27T13:28:36.653278+06:00
                        updated_at:
                          type: string
                          format: date-time
                          example: 2025-04-27T13:28:36.653278+06:00
                        status:
                          type: integer
                          example: 0
                        is_active:
                          type: boolean
                          example: true
                        member:
                          type: integer
                          example: 2
                        document_type:
                          type: integer
                          example: 1
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "500":
          description: "500"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
    patch:
      summary: update member documents
      description: update member documents for a specific member while registration.
      security:
        - TokenAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                member_ID:
                  type: string
                  example: LM111
                document_document:
                  type: string
                  format: binary
                document_type:
                  type: integer
                  example: 11
                id:
                  type: integer
                  example: 1
              required:
                - member_ID
                - document_document
                - document_type
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Member document has been updated successfully
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      document_id:
                        type: integer
                        example: 1
                    required:
                      - document_id
                required:
                  - code
                  - message
                  - status
                  - data
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: Member document has been created successfully
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      document_id:
                        type: integer
                        example: 1
                    required:
                      - document_id
                required:
                  - code
                  - message
                  - status
                  - data
        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

  /api/member/v1/members/history/:
    get:
      summary: Get all member avaiable histroy
      description: This endpoint hit will show all the avaiable member histroy
      security:
        - TokenAuth: []
      parameters:
        - name: start_date
          in: query
          description: filter by start_date
          schema:
            type: string
            format: date
        - name: end_date
          in: query
          description: filter by end_date
          schema:
            type: string
            format: date
        - name: transferred
          in: query
          description: filter by transferred or not
          schema:
            type: boolean

      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Showing all avaiable member histroy
                  data:
                    type: array
                    items:
                      type: object
                required:
                  - code
                  - status
                  - message
                  - data

  /api/member/v1/members/history/{member_ID}:
    get:
      summary: Get a single member history
      description: This endpoint hit will a single member history
      security:
        - TokenAuth: []
      parameters:
        - name: member_ID
          in: path
          description: filter by start_date
          schema:
            type: string
          required: true

      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Showing all avaiable member histroy
                  data:
                    type: array
                    items:
                      type: object
                required:
                  - code
                  - status
                  - message
                  - data

  /api/member/v1/members/special_day/:
    post:
      summary: Add special day by a member
      description: Add multiple special day by a specific member
      security:
        - TokenAuth: []

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                member_ID:
                  type: string
                  example: BM0002
                data:
                  type: array
                  items:
                    properties:
                      title:
                        type: string
                        example: Hello world
                      date:
                        type: string
                        format: date
                        example: 2024-02-12
                    required:
                      - title
              required:
                - member_ID
                - data
      responses:
        "201":
          description: "Created successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Member companion has been updated successfully
                  status:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        title:
                          type: string
                          example: Hello world
                      required:
                        - id
                        - title
                required:
                  - code
                  - message
                  - status
                  - data
        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "500":
          description: "500"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"

  /api/member/v1/members/special_day/{member_ID}/:
    patch:
      parameters:
        - name: member_ID
          in: path
          description: special day update by member_ID
          schema:
            type: string
          required: true
      summary: update special day by a member
      description: update specific  special day by a specific member
      security:
        - TokenAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                member_ID:
                  type: string
                  example: BM0002
                data:
                  type: array
                  items:
                    properties:
                      id:
                        type: integer
                        example: 1
                      title:
                        type: string
                        example: Hello world
                      date:
                        type: string
                        format: date
                        example: 2024-02-12

                    required:
                      - id
                      - title

              required:
                - member_ID
                - data
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Member Special Day has been updated successfully
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      special_day_id:
                        type: integer
                        example: 1
                    required:
                      - special_day_id
                required:
                  - code
                  - message
                  - status
                  - data
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: Member Special Day has been created successfully
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      special_day_ids:
                        type: array
                        items:
                          type: integer
                          example: 1,2
                    required:
                      - special_day_id
                required:
                  - code
                  - message
                  - status
                  - data
        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

  /api/member/v1/members/certificate/:
    post:
      summary: Add certificate for a specific member
      description: Add certificate for a specific member if he/she already exists in Member
      security:
        - TokenAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                member_ID:
                  type: string
                  example: BM0001
                title:
                  type: string
                  example: Hello world
                certificate_number:
                  type: string
                  example: ABC123
                certificate_document:
                  type: string
                  format: binary
              required:
                - member_ID
                - title
                - certificate_document

      responses:
        "201":
          description: "Created successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      title:
                        type: string
                        example: Hello world
                    required:
                      - id
                      - title
                required:
                  - data

        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
    patch:
      summary: update certificate information for a specific member
      description: update certificate information for a specific member if he/she already exists in Member otherwise create new object
      security:
        - TokenAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                member_ID:
                  type: string
                  example: BM0001
                title:
                  type: string
                  example: Hello world
                certificate_number:
                  type: string
                  example: ABC123
                certificate_document:
                  type: string
                  format: binary
                id:
                  type: integer
                  example: 1
              required:
                - member_ID
                - title
                - certificate_document
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Member certificate has been updated successfully
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      certificate_id:
                        type: integer
                        example: 1
                    required:
                      - certificate_id
                required:
                  - code
                  - message
                  - status
                  - data
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: Member certificate has been created successfully
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      certificate_id:
                        type: integer
                        example: 1
                    required:
                      - certificate_id
                required:
                  - code
                  - message
                  - status
                  - data
        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
  /api/member/v1/members/emails/:
    post:
      summary: Bulk emails sending to all members
      description: Bulk emails sending to all members with optional attachments
      security:
        - TokenAuth: []
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: Hello
                body:
                  type: string
                  example: Hello all members
                attachments:
                  type: array
                  items:
                    type: string
                    format: binary
                  description: List of file attachments
              required:
                - title
                - body

      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Successfully send emails
                  status:
                    type: string
                    example: "success"
        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

  /api/restaurants/v1/restaurants/cusines/:
    post:
      summary: "Add cousine type of restaurent"
      description: Add cousine type for the restaurant
      security:
        - TokenAuth: []

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: chinesse
              required:
                - name
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  status:
                    type: string
                    example: Success
                  message:
                    type: string
                    example: Operation successful
                  data:
                    type: object
                    properties:
                      name:
                        type: string
                        example: chinesse
                required:
                  - code
                  - status
                  - message
                  - data
        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
    get:
      summary: View all restaurant cusines
      description: View all added restaurant cusines
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Operation successful
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: chinesse
                required:
                  - code
                  - status
                  - message
                  - data

  /api/restaurants/v1/restaurants/categories/:
    post:
      summary: "Add Category of restaurent"
      description: Add Category for the restaurant
      security:
        - TokenAuth: []

      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: chinesse
              required:
                - name
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: Success
                  message:
                    type: string
                    example: Operation successful
                  data:
                    type: object
                    properties:
                      name:
                        type: string
                        example: chinesse
                required:
                  - code
                  - status
                  - message
                  - data
        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
    get:
      summary: View all restaurant Category
      description: View all added restaurant Category
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Operation successful
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: chinesse
                required:
                  - code
                  - status
                  - message
                  - data

  /api/restaurants/v1/restaurants/:
    post:
      summary: Add a new restaurant
      description: add a new restaurant with valid information
      security:
        - TokenAuth: []
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Foodien
                description:
                  type: string
                  example: This is a good restaurant
                address:
                  type: string
                  example: feni
                city:
                  type: string
                  example: feni
                state:
                  type: string
                  example: feni
                postal_code:
                  type: integer
                  example: 5555
                phone:
                  type: integer
                  example: 01478585966
                operating_hours:
                  type: integer
                  example: 10
                capacity:
                  type: integer
                  example: 100
                status:
                  type: string
                  example: active
                opening_time:
                  type: string
                  format: time
                closing_time:
                  type: string
                  format: time
                booking_fees_per_seat:
                  type: integer
                  example: 500
                cuisine_type:
                  type: integer
                  example: 1
                restaurant_type:
                  type: integer
                  example: 1
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: restaurant added successfully
                  data:
                    type: object
                required:
                  - code
                  - status
                  - message
                  - data
        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
    get:
      summary: Get all restaurant
      description: Get all restaurant list
      security:
        - TokenAuth: []
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Operation Success
                  status:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      type: object
                required:
                  - code
                  - message
                  - status
                  - data
        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

  /api/restaurants/v1/restaurants/items/categories/:
    post:
      security:
        - TokenAuth: []
      summary: Add restaurant items category
      description: Add restaurant Items category with valid restaurant
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Indian
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: Operation completed
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                required:
                  - code
                  - message
                  - status
                  - data
        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
    get:
      summary: View all restaurant items category
      description: View all avalialbe restaurant items category
      parameters:
        - name: restaurant
          in: query
          description: enter which restaurant
          schema:
            type: integer
          required: true
      security:
        - TokenAuth: []
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Operation success
                  data:
                    type: object
                required:
                  - code
                  - status
                  - message
                  - data
        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
  /api/restaurants/v1/restaurants/items/:
    post:
      security:
        - TokenAuth: []
      summary: Add restaurant items
      description: Add restaurant Items with valid restaurant
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: Fried rice
                description:
                  type: string
                  example: Fried rice
                availability:
                  type: boolean
                  example: true
                unit:
                  type: string
                  example: kg
                unit_cost:
                  type: integer
                  example: 599
                selling_price:
                  type: integer
                  example: 999
                category:
                  type: integer
                  example: 1
                restaurant:
                  type: integer
                  example: 1
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: Operation completed
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                required:
                  - code
                  - message
                  - status
                  - data
        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
    get:
      summary: View all restaurant items
      description: View all avalialbe restaurant items
      parameters:
        - name: restaurant
          in: query
          description: enter which restaurant
          schema:
            type: integer
          required: true
      security:
        - TokenAuth: []
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Operation success
                  data:
                    type: object
                required:
                  - code
                  - status
                  - message
                  - data
        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

  /api/restaurants/v1/restaurants/items/media:
    post:
      summary: Upload restaurant item media
      description: Upload restaurant items media with this endpoint
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                item:
                  type: integer
                  example: 1
                image:
                  type: string
                  format: binary
              required:
                - item
                - image
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Added restaurant item media

  /api/restaurants/v1/restaurants/items/buy/:
    post:
      summary: Buy Restaurant Items for member
      description: A user can buy restaurant items for a specific member
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                restaurant_items:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      quantity:
                        type: integer
                        example: 1
                    required:
                      - id
                      - quantity
                member_ID:
                  type: string
                  example: GM001
                restaurant:
                  type: integer
                  example: 1
                promo_code:
                  type: string
                  example: DIS30
              required:
                - restaurant_items
                - member_ID
                - restaurant
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Invoice created successfully
                  data:
                    type: object
                required:
                  - code
                  - status
                  - message
                  - data

  /api/restaurants/v1/restaurants/upload/excel:
    post:
      summary: Upload restarurants sales
      description: Upload restaursnt sales in excel file.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                excel_file:
                  type: string
                  format: binary
              required:
                - excel_file
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Added data using restaurant data
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                required:
                  - code
                  - message
                  - status
                  - data

  /api/member_financial/v1/payment/options/:
    get:
      summary: Show all payment options
      description: Show all avaiiable payment options
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Viewing payment options
                  data:
                    type: object
                required:
                  - code
                  - status
                  - message
                  - data
    post:
      summary: set payment options
      description: Set payment options for transactions
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: cash
              required:
                - name
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: New payment option created
                  data:
                    type: object
                required:
                  - code
                  - status
                  - message
                  - data

  /api/member_financial/v1/payment/invoice/:
    post:
      summary: Make Payment of invoices
      description: Make payments of the invoices
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                invoice_id:
                  type: integer
                  example: 1
                payment_method:
                  type: integer
                  example: 1
                amount:
                  type: integer
                  example: 500
                income_particular:
                  type: integer
                  example: 1
                received_from:
                  type: integer
                  example: 1
                adjust_from_balance:
                  type: boolean
                  example: true

              required:
                - invoice_id
                - payment_method
                - amount
                - income_particular
                - received_from
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Paymant done
                  data:
                    type: object

  /api/member_financial/v1/income/particular/:
    post:
      summary: Set income pariculars
      description: set up the income particulars from this endpoint
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: restaurant
              required:
                - name
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: New income particular has been added
                  data:
                    type: object
                required:
                  - code
                  - status
                  - message
                  - data
    get:
      summary: Get all income particular
      description: Get all available income particular
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: List of all available income particular
                  data:
                    type: array
                    items:
                      type: object
                required:
                  - code
                  - status
                  - message
                  - data

  /api/member_financial/v1/income/receiving_options/:
    post:
      summary: Set income receiving type
      description: set up the income receiving type from this endpoint
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: restaurant
              required:
                - name
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: New income receiving type has been added
                  data:
                    type: object
                required:
                  - code
                  - status
                  - message
                  - data
    get:
      summary: Get all income receiving type
      description: Get all available income receiving type
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: List of all available income receiving type
                  data:
                    type: array
                    items:
                      type: object
                required:
                  - code
                  - status
                  - message
                  - data

  /api/member_financial/v1/invoices/:
    get:
      summary: View all invoices
      description: View all created invoices with filtering support
      parameters:
        - name: is_full_paid
          in: query
          schema:
            type: boolean
        - name: status
          in: query
          schema:
            type: string
        - name: invoice_type
          in: query
          schema:
            type: string
        - name: member
          in: query
          schema:
            type: string

      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: List of invoices
                  data:
                    type: object
                required:
                  - code
                  - status
                  - message
                  - data
    delete:
      summary: Delete multiple invoices
      description: Delete multiple invoices by there id
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                invoice_id:
                  type: array
                  items:
                    type: integer
              required:
                - invoice_id
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: deleted all invoices
                  data:
                    type: object

  /api/member_financial/v1/invoices/custom/delete/:
    delete:
      summary: Delete invoices with custom filtering
      description: Delete invoices with custom filtering method
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                issued_date:
                  type: string
                  format: date
                invoice_type:
                  type: string
                  example: others
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: delelted all invoices

  /api/member_financial/v1/invoices/{id}/:
    get:
      summary: View a specific invoice
      description: View a specific invoice
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: List of invoices
                  data:
                    type: object
                required:
                  - code
                  - status
                  - message
                  - data
    delete:
      summary: Delete specific invoice
      description: Delete specific invoice
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Successfully deleted invoice.
                  data:
                    type: object
                required:
                  - code
                  - status
                  - message
                  - data
    patch:
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
      summary: Update a specific invoice
      description: Update a specific invoice
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                balance_due:
                  type: integer
                  example: 500
                paid_amount:
                  type: integer
                  example: 1000
                total_amount:
                  type: integer
                  example: 1500
              required:
                - balance_due
                - paid_amount
                - total_amount
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Update the invoice
                  data:
                    type: object
                required:
                  - code
                  - status
                  - message
                  - data

  /api/member_financial/v1/income/:
    get:
      summary: View all income
      description: View all income instance list
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: List of invoices
                  data:
                    type: object
                required:
                  - code
                  - status
                  - message
                  - data

  /api/member_financial/v1/income/{id}/:
    get:
      summary: View all income
      description: View all income instance list
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: List of invoices
                  data:
                    type: object
                required:
                  - code
                  - status
                  - message
                  - data

  /api/member_financial/v1/sales/:
    get:
      summary: view all sales
      description: View all sales
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: List of all sales
                  data:
                    type: object
                required:
                  - code
                  - status
                  - message
                  - data

  /api/member_financial/v1/sales/{id}/:
    get:
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true

      summary: view specific sale
      description: View specific sale
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: List of all sales
                  data:
                    type: object
                required:
                  - code
                  - status
                  - message
                  - data

  /api/member_financial/v1/transactions/:
    get:
      summary: view all transactions
      description: View the list of transactions
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: List of all sales
                  data:
                    type: object
                required:
                  - code
                  - status
                  - message
                  - data

  /api/member_financial/v1/transactions/{id}/:
    get:
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true

      summary: view specific transaction
      description: View specific transaction
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: List of all sales
                  data:
                    type: object
                required:
                  - code
                  - status
                  - message
                  - data

  /api/member_financial/v1/payments/:
    get:
      summary: View all payments
      description: View the list of all payments
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: View list of all payments
                  data:
                    type: object
                required:
                  - code
                  - status
                  - message
                  - data

  /api/member_financial/v1/payments/{id}/:
    get:
      summary: View specific payment
      description: View a specific payment
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: View specific payment
                  data:
                    type: object
                required:
                  - code
                  - status
                  - message
                  - data

  /api/member_financial/v1/dues/:
    get:
      summary: View all dues
      description: View the list of all dues
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: View list of all dues
                  data:
                    type: object
                required:
                  - code
                  - status
                  - message
                  - data

  /api/member_financial/v1/dues/{id}/:
    get:
      summary: View specific due
      description: View a specific due
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: View specific due
                  data:
                    type: object
                required:
                  - code
                  - status
                  - message
                  - data

  /api/member_financial/v1/member_dues/:
    get:
      summary: View all member dues
      description: View the list of all member dues
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: View list of all dues
                  data:
                    type: object
                required:
                  - code
                  - status
                  - message
                  - data
    post:
      summary: Pay member due
      description: Make payment of member dues
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                member_due_id:
                  type: integer
                  example: 1
                payment_method:
                  type: integer
                  example: 1
                amount:
                  type: integer
                  example: 1
                adjust_from_balance:
                  type: boolean
                  example: false
              required:
                - member_due_id
                - payment_method
                - amount
                - adjust_from_balance
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: successful payed the due
                  data:
                    type: object

  /api/member_financial/v1/member_dues/{id}/:
    get:
      summary: View specific member due
      description: View a specific member due
      parameters:
        - name: id
          in: path
          schema:
            type: integer
          required: true
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: View specific due
                  data:
                    type: object
                required:
                  - code
                  - status
                  - message
                  - data

  /api/member_financial/v1/member_accounts/:
    get:
      summary: View all member accounts
      description: View the list of all member accounts
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: View list of all accounts
                  data:
                    type: object
                required:
                  - code
                  - status
                  - message
                  - data

  /api/member_financial/v1/member_accounts/{id}/:
    get:
      summary: View specific member account
      description: View a specific member account
      parameters:
        - name: id
          in: path
          schema:
            type: string
          required: true
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: View specific member account
                  data:
                    type: object
                required:
                  - code
                  - status
                  - message
                  - data

  /api/event/v1/events/venues/:
    post:
      summary: Create a new venue
      description: Register a new event venue with address details.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                street_address:
                  type: string
                  maxLength: 255
                  example: "123 Main St"
                city:
                  type: string
                  maxLength: 255
                  example: "New York"
                state_province:
                  type: string
                  maxLength: 255
                  example: "NY"
                postal_code:
                  type: string
                  maxLength: 20
                  example: "10001"
                country:
                  type: string
                  maxLength: 2
                  example: "US"
                  enum: ["US", "CA", "GB", "FR", "DE"]

              required:
                - street_address
                - city
                - country
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Venue created successfully
                  data:
                    type: object
                    properties:
                      venue_id:
                        type: integer
                        example: 1
                      street_address:
                        type: string
                        example: 123 Main St
                      city:
                        type: string
                        example: Dhaka
                    required:
                      - venue_id
                      - street_address
                      - city
                required:
                  - code
                  - status
                  - message
                  - data
        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
    get:
      summary: Retrieve all venues
      description: Retrieve a list of all registered event venues.
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: Success
                  message:
                    type: string
                    example: venues retrieved successfully
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        venue_id:
                          type: integer
                          example: 1
                        street_address:
                          type: string
                          example: "123 Main St"
                        city:
                          type: string
                          example: "New York"
                        state_province:
                          type: string
                          example: "NY"
                        postal_code:
                          type: string
                          example: "10001"
                        country:
                          type: string
                          example: "US"
        "500":
          description: "500"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

  /api/event/v1/events/:
    post:
      summary: Create a new event
      description: Register a new event with event details
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  maxLength: 255
                  example: "Tech Conference 2025"
                description:
                  type: string
                  example: "An event for tech enthusiasts and professionals."
                start_date:
                  type: string
                  format: date-time
                  example: "2025-08-15T10:00:00Z"
                end_date:
                  type: string
                  format: date-time
                  example: "2025-08-15T18:00:00Z"
                status:
                  type: string
                  maxLength: 20
                  example: "planned"
                  enum: ["planned", "ongoing", "completed", "canceled"]
                registration_deadline:
                  type: string
                  format: date-time
                  example: "2025-08-10T23:59:59Z"
                event_type:
                  type: string
                  maxLength: 255
                  example: "Conference"
                reminder_time:
                  type: string
                  format: date-time
                  example: "2025-08-14T12:00:00Z"
                venue:
                  type: integer
                  nullable: true
                  example: 1
                  description: "ID of the venue where the event is taking place"
                organizer:
                  type: integer
                  nullable: true
                  example: 3
                  description: "ID of the member organizing the event"

              required:
                - title
                - description
                - start_date
                - end_date
                - status
                - registration_deadline
                - event_type

      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  status:
                    type: string
                    example: Success
                  message:
                    type: string
                    example: Event created successfully
                  data:
                    type: object
                    properties:
                      event_id:
                        type: integer
                        example: 1
                      event_title:
                        type: string
                        example: Tech Conference 2025
                    required:
                      - event_id
                      - event_title
        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

    get:
      summary: retrieve all events
      description: Retrieve a list of all registered events
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: Success
                  message:
                    type: string
                    example: Events retrieved successfully
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        event_id:
                          type: integer
                          example: 1
                        title:
                          type: string
                          example: "Tech Conference 2025"
                        description:
                          type: string
                          example: "An event for tech enthusiasts and professionals."
                        start_date:
                          type: string
                          format: date-time
                          example: "2025-08-15T10:00:00Z"
                        end_date:
                          type: string
                          format: date-time
                          example: "2025-08-15T18:00:00Z"
                        status:
                          type: string
                          example: planned
                        registration_deadline:
                          type: string
                          format: date-time
                          example: "2025-08-10T23:59:59Z"
                        event_type:
                          type: string
                          example: "Conference"
                        reminder_time:
                          type: string
                          format: date-time
                          example: "2025-08-14T12:00:00Z"
                        venue:
                          type: integer
                          nullable: true
                          example: 1
                        organizer:
                          type: integer
                          nullable: true
                          example: 3

                      required:
                        - event_id
                        - title
                        - description
                        - start_date
                        - end_date
                        - registration_deadline
                        - event_type
                        - reminder_time
        "500":
          description: "500"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

  /api/event/v1/events/{event_id}/:
    get:
      summary: Retrieve specific event details
      description: Retrieve details of a specific event based on its event ID.
      parameters:
        - name: event_id
          in: path
          description: The ID of the event to retrieve
          required: true
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "Event details retrieved successfully"
                  status:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 8
                      created_at:
                        type: string
                        format: date-time
                        example: "2025-04-07T09:16:23.632771+06:00"
                      updated_at:
                        type: string
                        format: date-time
                        example: "2025-04-07T09:16:23.632771+06:00"
                      is_active:
                        type: boolean
                        example: true
                      title:
                        type: string
                        example: "Tech Conference_9 2025"
                      description:
                        type: string
                        example: "An event for tech enthusiasts and professionals."
                      start_date:
                        type: string
                        format: date-time
                        example: "2025-08-15T16:00:00+06:00"
                      end_date:
                        type: string
                        format: date-time
                        example: "2025-08-16T00:00:00+06:00"
                      status:
                        type: string
                        example: "planned"
                      registration_deadline:
                        type: string
                        format: date-time
                        example: "2025-08-11T05:59:59+06:00"
                      event_type:
                        type: string
                        example: "Conference"
                      reminder_time:
                        type: string
                        format: date-time
                        example: "2025-08-14T18:00:00+06:00"
                      venue:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          street_address:
                            type: string
                            example: "123 Main St"
                          city:
                            type: string
                            example: "New York"
                          state_province:
                            type: string
                            example: "NY"
                          postal_code:
                            type: string
                            example: "10001"
                          country:
                            type: string
                            example: "US"
                      organizer:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          first_name:
                            type: string
                            example: "Salauddin"
                          last_name:
                            type: string
                            example: "Ahmed"
                          date_of_birth:
                            type: string
                            example: "2025-04-06"
                          profile_photo:
                            type: string
                            example: "/media/profile_photos/7028528.jpg"
                          blood_group:
                            type: string
                            example: "B+"
                          nationality:
                            type: string
                            example: "BD"
                          gender:
                            type: integer
                            example: 1
                          membership_type:
                            type: integer
                            example: 1
                          membership_status:
                            type: integer
                            example: 1
                          marital_status:
                            type: integer
                            example: 1
        "404":
          description: "404"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MethodNotFoundError"
        "500":
          description: "500"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"

  /api/event/v1/events/media/:
    post:
      summary: Upload media for an event
      description: Upload an image related to a specific event.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                image:
                  type: string
                  format: binary
                  description: "Image file to be uploaded"
                event:
                  type: integer
                  example: 1
                  description: "ID of the event associated with this media"
              required:
                - image
                - event
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  status:
                    type: string
                    example: Success
                  message:
                    type: string
                    example: Media uploaded successfully
                  data:
                    type: object
                    properties:
                      image_id:
                        type: integer
                        example: 1
                      event_id:
                        type: integer
                        example: 1
                required:
                  - code
                  - status
                  - message
                  - data
        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "401":
          description: "401 "
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

  /api/event/v1/events/tickets/:
    post:
      summary: Create a new event ticket
      description: Register a ticket for an event with pricing and availability details.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                ticket_name:
                  type: string
                  maxLength: 255
                  example: "VIP Pass"
                ticket_description:
                  type: string
                  example: "Access to VIP lounge and priority entry"
                price:
                  type: number
                  format: decimal
                  example: 99.99
                capacity:
                  type: integer
                  example: 100
                start_sale_date:
                  type: string
                  format: date-time
                  example: "2025-04-01T10:00:00Z"
                end_sale_date:
                  type: string
                  format: date-time
                  example: "2025-04-10T22:00:00Z"
                status:
                  type: string
                  example: "available"
                  enum: ["available", "sold_out", "canceled"]
                event:
                  type: integer
                  example: 1
                  description: "ID of the associated event"

              required:
                - ticket_name
                - price
                - capacity
                - start_sale_date
                - end_sale_date
                - status
                - event
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  status:
                    type: string
                    example: Success
                  message:
                    type: string
                    example: Ticket created successfully
                  data:
                    type: object
                    properties:
                      ticket_id:
                        type: integer
                        example: 1
                      ticket_name:
                        type: string
                        example: VIP Pass
                required:
                  - ticket_id
                  - ticket_name

        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
    get:
      summary: Retrieve all event tickets
      description: Get a list of all tickets created for events.
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: Success
                  message:
                    type: string
                    example: Tickets retrieved successfully
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        ticket_id:
                          type: integer
                          example: 1
                        ticket_name:
                          type: string
                          example: VIP Pass
                        ticket_description:
                          type: string
                          example: Access to VIP lounge and priority entry
                        price:
                          type: number
                          format: decimal
                          example: 99.99
                        capacity:
                          type: integer
                          example: 100
                        start_sale_date:
                          type: string
                          format: date-time
                          example: "2025-04-01T10:00:00Z"
                        end_sale_date:
                          type: string
                          format: date-time
                          example: "2025-04-10T22:00:00Z"
                        status:
                          type: string
                          example: available
                        event:
                          type: integer
                          example: 1
                required:
                  - code
                  - status
                  - message
                  - data

        "500":
          description: "500"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

  /api/event/v1/events/tickets/buy/:
    post:
      summary: User by ticket and generate invoice
      description: User by ticket and generate invoice and invoice items,invoice type
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                event_ticket:
                  type: integer
                  example: 1
                member_ID:
                  type: string
                  example: BM0002
              required:
                - event_ticket
                - member_ID
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Invoice created successfully
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 4
                      invoice_type:
                        type: string
                        example: Event
                      generated_by:
                        type: string
                        example: admin
                      member:
                        type: string
                        example: Salauddin
                      restaurant:
                        type: string
                        nullable: true
                        example: null
                      created_at:
                        type: string
                        format: date-time
                        example: "2025-04-09T09:07:11.250706+06:00"
                      updated_at:
                        type: string
                        format: date-time
                        example: "2025-04-09T09:07:11.250706+06:00"
                      is_active:
                        type: boolean
                        example: true
                      currency:
                        type: string
                        example: BDT
                      invoice_number:
                        type: string
                        example: INV-954C586C
                      balance_due:
                        type: string
                        example: "99.99"
                      paid_amount:
                        type: string
                        example: "0.00"
                      due_date:
                        type: string
                        nullable: true
                        example: null
                      issue_date:
                        type: string
                        format: date
                        example: "2025-04-09"
                      total_amount:
                        type: string
                        example: "99.99"
                      is_full_paid:
                        type: boolean
                        example: false
                      discount:
                        type: string
                        nullable: true
                        example: null
                      promo_code:
                        type: string
                        example: ""
                      tax:
                        type: string
                        nullable: true
                        example: null
                      status:
                        type: string
                        example: unpaid
                      event:
                        type: integer
                        example: 7
        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

  /api/event/v1/events/tickets/{event_id}/:
    get:
      summary: Retrieve specific event ticket details
      description: Returns detailed information about a specific event ticket, including its associated event and venue.
      parameters:
        - name: event_id
          in: path
          required: true
          description: ID of the event ticket
          schema:
            type: integer
            example: 1
      responses:
        "200":
          description: Event ticket details
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Event ticket details
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      created_at:
                        type: string
                        format: date-time
                        example: "2025-04-07T10:13:45.131334+06:00"
                      updated_at:
                        type: string
                        format: date-time
                        example: "2025-04-07T10:13:45.131334+06:00"
                      is_active:
                        type: boolean
                        example: true
                      ticket_name:
                        type: string
                        example: VIP Pass
                      ticket_description:
                        type: string
                        example: Access to VIP lounge and priority entry
                      price:
                        type: string
                        example: "99.99"
                      capacity:
                        type: integer
                        example: 100
                      start_sale_date:
                        type: string
                        format: date-time
                        example: "2025-04-01T16:00:00+06:00"
                      end_sale_date:
                        type: string
                        format: date-time
                        example: "2025-04-11T04:00:00+06:00"
                      status:
                        type: string
                        example: available
                      event:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 7
                          created_at:
                            type: string
                            example: "2025-04-06T15:58:21.627773+06:00"
                          updated_at:
                            type: string
                            example: "2025-04-06T15:58:21.627773+06:00"
                          is_active:
                            type: boolean
                            example: true
                          title:
                            type: string
                            example: Tech Conference_8 2025
                          description:
                            type: string
                            example: An event for tech enthusiasts and professionals.
                          start_date:
                            type: string
                            example: "2025-08-15T16:00:00+06:00"
                          end_date:
                            type: string
                            example: "2025-08-16T00:00:00+06:00"
                          status:
                            type: string
                            example: planned
                          registration_deadline:
                            type: string
                            example: "2025-08-11T05:59:59+06:00"
                          event_type:
                            type: string
                            example: Conference
                          reminder_time:
                            type: string
                            example: "2025-08-14T18:00:00+06:00"
                      venue:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          created_at:
                            type: string
                            example: "2025-04-06T12:45:48.661803+06:00"
                          updated_at:
                            type: string
                            example: "2025-04-06T12:45:48.662798+06:00"
                          is_active:
                            type: boolean
                            example: true
                          street_address:
                            type: string
                            example: 123 Main St
                          city:
                            type: string
                            example: New York
                          state_province:
                            type: string
                            example: NY
                          postal_code:
                            type: string
                            example: 10001
        "500":
          description: "500"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

  /api/event/v1/events/fees/:
    post:
      summary: Create a new event fee
      description: Register a fee for an event based on membership type.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                fee:
                  type: number
                  format: decimal
                  example: 50.00
                event:
                  type: integer
                  example: 1
                  description: "ID of the associated event"
                membership_type:
                  type: string
                  example: VM

              required:
                - fee
                - event
                - membership_type
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  status:
                    type: string
                    example: Success
                  message:
                    type: string
                    example: Event fee created successfully
                  data:
                    type: object
                    properties:
                      fee_id:
                        type: integer
                        example: 1
                      event_fee:
                        type: number
                        format: decimal
                        example: 50.00

                    required:
                      - fee_id
                      - event_fee

        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

    get:
      summary: Retrieve a list of event fees
      description: Get all fees associated with events and membership types.
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: Success
                  message:
                    type: string
                    example: Event fees retrieved successfully
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        fee_id:
                          type: integer
                          example: 1
                        fee:
                          type: number
                          format: decimal
                          example: 50.00
                        event_id:
                          type: integer
                          example: 1
                        membership_type:
                          type: string
                          example: VM
        "500":
          description: "500"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

  /api/product/v1/products/categories/:
    post:
      summary: Create a new product category
      description: Register a new category for products.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 255
                  example: "Electronics"

              required:
                - name
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  status:
                    type: string
                    example: Success
                  message:
                    type: string
                    example: Product category created successfully
                  data:
                    type: array
                    items:
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: "Electronics"
                      required:
                        - id
                        - name

                required:
                  - code
                  - status
                  - message
                  - data

        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

    get:
      summary: Retrieve a list of product categories
      description: Get all available categories under which products are classified.
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: Success
                  message:
                    type: string
                    example: Category list retrieved successfully
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        category_id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: Bags
                      required:
                        - category_id
                        - name
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "500":
          description: "500"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/product/v1/products/categories/{id}/:
    patch:
      summary: Update a product category
      description: Update an existing product category by ID.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the category to update
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 255
                  example: "Updated Electronics"
                is_active:
                  type: boolean
                  example: false
              required:
                - name
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: Success
                  message:
                    type: string
                    example: Product category updated successfully
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: "Updated Electronics"
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
    delete:
      summary: Delete a product category
      description: Delete a specific product category by its ID.
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the category to delete
          schema:
            type: integer
      responses:
        "204":
          description: "204"
        "401":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

  /api/product/v1/products/brands/:
    post:
      summary: Create a new product brand
      description: Register a new brand for products.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 255
                  example: "Apple"
              required:
                - name
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  status:
                    type: string
                    example: Success
                  message:
                    type: string
                    example: Product brand created successfully
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: "Apple"
                    required:
                      - id
                      - name
                required:
                  - code
                  - status
                  - message
                  - data
        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
    get:
      summary: Retrieve a list of brands
      description: Get all available brands used for products or events.
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: Success
                  message:
                    type: string
                    example: Brand list retrieved successfully
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        brand_id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: Nike

                      required:
                        - brand_id
                        - name
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "500":
          description: "500"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"

  /api/product/v1/products/:
    post:
      summary: Create a new product
      description: Register a new product with details
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  maxLength: 255
                  example: "iPhone 13"
                description:
                  type: string
                  example: "Latest model of iPhone with improved performance and camera."
                price:
                  type: number
                  format: float
                  example: 999.99
                discount_rate:
                  type: number
                  format: float
                  example: 10.00
                quantity_in_stock:
                  type: integer
                  example: 100
                sku:
                  type: string
                  maxLength: 50
                  example: "IP13-XYZ123"
                category:
                  type: integer
                  example: 1
                brand:
                  type: integer
                  nullable: true
                  example: 1
              required:
                - name
                - description
                - price
                - sku
                - category
                - quantity_in_stock
                - brand
                - discount_rate
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  status:
                    type: string
                    example: Success
                  message:
                    type: string
                    example: Product created successfully
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: "iPhone 13"
                    required:
                      - id
                      - name
        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

    get:
      summary: Retrieve product list
      description: Get a list of all products with their full details
      responses:
        "200":
          description: Product list retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Product list retrieved successfully
                  status:
                    type: string
                    example: success
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 4
                        created_at:
                          type: string
                          format: date-time
                          example: "2025-04-07T16:14:08.523311+06:00"
                        updated_at:
                          type: string
                          format: date-time
                          example: "2025-04-07T16:14:08.523311+06:00"
                        is_active:
                          type: boolean
                          example: true
                        name:
                          type: string
                          example: "iPhone 16"
                        description:
                          type: string
                          example: "Latest model of iPhone with improved performance and camera."
                        price:
                          type: string
                          example: "100.00"
                        discount_rate:
                          type: string
                          example: "10.00"
                        quantity_in_stock:
                          type: integer
                          example: 100
                        sku:
                          type: string
                          example: "IP13-XYZ123"
                        category:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            created_at:
                              type: string
                              format: date-time
                              example: "2025-04-07T12:42:12.663193+06:00"
                            updated_at:
                              type: string
                              format: date-time
                              example: "2025-04-07T12:42:12.663193+06:00"
                            is_active:
                              type: boolean
                              example: true
                            name:
                              type: string
                              example: "Bags"
                        brand:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            created_at:
                              type: string
                              format: date-time
                              example: "2025-04-07T12:39:17.831928+06:00"
                            updated_at:
                              type: string
                              format: date-time
                              example: "2025-04-07T12:39:17.831928+06:00"
                            is_active:
                              type: boolean
                              example: true
                            name:
                              type: string
                              example: "Skribe"

  /api/product/v1/products/{product_id}/:
    get:
      summary: Retrieve specific product details
      description: Retrieve details of a specific product based on its product ID.
      parameters:
        - name: product_id
          in: path
          description: The ID of the product to retrieve
          required: true
          schema:
            type: integer
            example: 7

      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "Product details retrieved successfully"
                  status:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 7
                      created_at:
                        type: string
                        format: date-time
                        example: "2025-04-08T10:09:37.745371+06:00"
                      updated_at:
                        type: string
                        format: date-time
                        example: "2025-04-08T10:09:37.745371+06:00"
                      is_active:
                        type: boolean
                        example: true
                      name:
                        type: string
                        example: "iPhone 16 pro"
                      description:
                        type: string
                        example: "Latest model of iPhone with improved performance and camera."
                      price:
                        type: number
                        format: float
                        example: 100.00
                      discount_rate:
                        type: number
                        format: float
                        example: 100.00
                      quantity_in_stock:
                        type: integer
                        example: 100
                      sku:
                        type: string
                        example: "IP13-X"
                      category:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          name:
                            type: string
                            example: "Bags"
                      brand:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          name:
                            type: string
                            example: "Skribe"
                required:
                  - code
                  - message
                  - status
                  - data
        "404":
          description: "404"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/MethodNotFoundError"
        "500":
          description: "500"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
  /api/product/v1/products/buy/:
    post:
      summary: Purchase products and generate invoice
      description: Accepts a list of products with quantity and a member ID, then generates an invoice for the purchase.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                product_items:
                  type: array
                  items:
                    type: object
                    properties:
                      product:
                        type: integer
                        example: 7
                      quantity:
                        type: integer
                        example: 7
                  example:
                    - product: 7
                      quantity: 7
                    - product: 5
                      quantity: 7
                member_ID:
                  type: string
                  example: BM0001
              required:
                - product_items
                - member_ID
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: Invoice created successfully
                  status:
                    type: string
                    example: success
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 8
                      invoice_type:
                        type: string
                        example: Product
                      generated_by:
                        type: string
                        example: admin
                      member:
                        type: string
                        example: Salauddin
                      restaurant:
                        type: string
                        nullable: true
                        example: null
                      created_at:
                        type: string
                        format: date-time
                        example: "2025-04-09T11:53:55.132319+06:00"
                      updated_at:
                        type: string
                        format: date-time
                        example: "2025-04-09T11:53:55.132319+06:00"
                      is_active:
                        type: boolean
                        example: true
                      currency:
                        type: string
                        example: BDT
                      invoice_number:
                        type: string
                        example: INV-0F48A5F3
                      balance_due:
                        type: string
                        example: "1400.00"
                      paid_amount:
                        type: string
                        example: "0.00"
                      due_date:
                        type: string
                        nullable: true
                        example: null
                      issue_date:
                        type: string
                        format: date
                        example: "2025-04-09"
                      total_amount:
                        type: string
                        example: "1400.00"
                      is_full_paid:
                        type: boolean
                        example: false
                      discount:
                        type: string
                        nullable: true
                        example: null
                      promo_code:
                        type: string
                        example: ""
                      tax:
                        type: string
                        nullable: true
                        example: null
                      status:
                        type: string
                        example: unpaid
                      event:
                        type: string
                        nullable: true
                        example: null
        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
  /api/product/v1/products/media/:
    post:
      summary: Upload media for a product
      description: Attach images or media to a specific product.
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                product:
                  type: integer
                  example: 1
                image:
                  type: string
                  format: binary
                  description: "Product image file"
              required:
                - product
                - image
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  status:
                    type: string
                    example: Success
                  message:
                    type: string
                    example: "Product media uploaded successfully"
                  data:
                    type: object
                    properties:
                      image_id:
                        type: integer
                        example: 1
                    required:
                      - image_id
        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

  /api/product/v1/products/prices/:
    post:
      summary: Set a price for a product based on membership type
      description: Set a specific price for a product based on the membership type.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                product:
                  type: integer
                  example: 1
                membership_type:
                  type: string
                  example: BM
                price:
                  type: number
                  format: float
                  example: 499.99
              required:
                - product_id
                - membership_type_id
                - price
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  status:
                    type: string
                    example: Success
                  message:
                    type: string
                    example: "Product price set successfully"
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      price:
                        type: number
                        format: float
                        example: 499.99
                    required:
                      - id
                      - price
                required:
                  - code
                  - status
                  - message
                  - data
        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

    get:
      summary: Retrieve all product prices
      description: Retrieve a list of all product prices, including product details and associated membership types.
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: "Product price list retrieved successfully"
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 2
                        created_at:
                          type: string
                          format: date-time
                          example: "2025-04-08T10:09:54.237905+06:00"
                        updated_at:
                          type: string
                          format: date-time
                          example: "2025-04-08T10:09:54.237905+06:00"
                        is_active:
                          type: boolean
                          example: true
                        price:
                          type: number
                          format: float
                          example: 499.99
                        product:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 7
                            name:
                              type: string
                              example: "iPhone 16 pro"
                            description:
                              type: string
                              example: "Latest model of iPhone with improved performance and camera."
                            price:
                              type: number
                              format: float
                              example: 100.00
                            discount_rate:
                              type: number
                              format: float
                              example: 100.00
                            quantity_in_stock:
                              type: integer
                              example: 100
                            sku:
                              type: string
                              example: "IP13-X"
                            category:
                              type: object
                              properties:
                                id:
                                  type: integer
                                  example: 1
                                name:
                                  type: string
                                  example: "Bags"
                            brand:
                              type: object
                              properties:
                                id:
                                  type: integer
                                  example: 1
                                name:
                                  type: string
                                  example: "Skribe"
                        membership_type:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            name:
                              type: string
                              example: "BM"
                required:
                  - code
                  - status
                  - message
                  - data
        "500":
          description: "500"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

  /api/facility/v1/facilities/:
    post:
      summary: Create a new facility
      description: Register a new facility with details
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Eym"
                description:
                  type: string
                  example: "A well-equipped gym for all your fitness needs."
                usages_fee:
                  type: number
                  format: float
                  example: 50.00
                usages_roles:
                  type: string
                  example: "member"
                operating_hours:
                  type: string
                  example: "6 AM - 9 PM"
                status:
                  type: string
                  example: "open"
                capacity:
                  type: integer
                  example: 100
              required:
                - name
                - description
                - usages_fee
                - usages_roles
                - operating_hours
                - status
                - capacity
      responses:
        "201":
          description: Facility created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Facility created successfully
                  data:
                    type: object
                    properties:
                      facility_id:
                        type: integer
                        example: 1
                      facility_name:
                        type: string
                        example: "Eym"

        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

    get:
      summary: Get all facility list
      description: Retrieve a list of all facilities
      parameters:
        - name: name
          in: query
          schema:
            type: string
        - name: usages_roles
          in: query
          schema:
            type: string
        - name: usages_fee__lte
          in: query
          schema:
            type: number
            format: decimal
        - name: usages_fee__gte
          in: query
          schema:
            type: number
            format: decimal

      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Facility list retrieved successfully
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        name:
                          type: string
                          example: "Eym"
                        description:
                          type: string
                          example: "A well-equipped gym for all your fitness needs."
                        usages_fee:
                          type: number
                          format: float
                          example: 50.00
                        usages_roles:
                          type: string
                          example: "member"
                        operating_hours:
                          type: string
                          example: "6 AM - 9 PM"
                        status:
                          type: string
                          example: "open"
                        capacity:
                          type: integer
                          example: 100
                        created_at:
                          type: string
                          format: date-time
                          example: "2025-04-10T10:00:00Z"
                        updated_at:
                          type: string
                          format: date-time
                          example: "2025-04-10T10:00:00Z"
        "500":
          description: "500"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
  /api/facility/v1/facilities/{facility_id}/:
    get:
      summary: Retrieve a specific facility
      description: Get the details of a specific facility by its ID
      parameters:
        - name: facility_id
          in: path
          required: true
          schema:
            type: integer
          description: ID of the facility
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "Facility retrieved successfully"
                  status:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: "Gym"
                      description:
                        type: string
                        example: "A well-equipped gym for all your fitness needs."
                      usages_fee:
                        type: string
                        example: "50.00"
                      usages_roles:
                        type: string
                        example: "member"
                      operating_hours:
                        type: string
                        example: "6 AM - 9 PM"
                      status:
                        type: string
                        example: "open"
                      capacity:
                        type: integer
                        example: 100
                      created_at:
                        type: string
                        format: date-time
                      updated_at:
                        type: string
                        format: date-time
                      is_active:
                        type: boolean
                        example: true
        "500":
          description: "500"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

  /api/facility/v1/facility_fees/:
    post:
      summary: Create a facility use fee
      description: Register a fee for using a facility for a specific membership type
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                fee:
                  type: string
                  example: "50.00"
                facility:
                  type: integer
                  example: 2
                membership_type:
                  type: integer
                  example: 2
              required:
                - fee
                - facility
                - membership_type
      responses:
        "201":
          description: Facility use fee created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: "Facility use fee created successfully"
                  status:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      facility_use_fee_id:
                        type: integer
                        example: 2
                      facility_use_fee:
                        type: number
                        format: float
                        example: 50.0
                required:
                  - facility_use_fee_id
                  - facility_use_fee
        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

    get:
      summary: Retrieve facility use fees
      description: Get a list of all facility use fees with facility and membership details
      responses:
        "200":
          description: Facility use fees retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "Facility use fees retrieved successfully"
                  status:
                    type: string
                    example: "success"
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        created_at:
                          type: string
                          format: date-time
                          example: "2025-04-10T09:22:46.327948+06:00"
                        updated_at:
                          type: string
                          format: date-time
                          example: "2025-04-10T09:22:46.327948+06:00"
                        is_active:
                          type: boolean
                          example: true
                        fee:
                          type: string
                          example: "50.00"
                        facility:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 1
                            name:
                              type: string
                              example: "Gym"
                            description:
                              type: string
                              example: "A well-equipped gym for all your fitness needs."
                            usages_fee:
                              type: string
                              example: "50.00"
                            usages_roles:
                              type: string
                              example: "member"
                            operating_hours:
                              type: string
                              example: "6 AM - 9 PM"
                            status:
                              type: string
                              example: "open"
                            capacity:
                              type: integer
                              example: 100
                        membership_type:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 2
                            name:
                              type: string
                              example: "CM"
        "500":
          description: "500"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
  /api/facility/v1/facility/buy/:
    post:
      summary: Create an invoice for facility usage
      description: Allows a member to purchase or register for a facility, generating an invoice.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                member_ID:
                  type: string
                  example: "BM0001"
                facility:
                  type: integer
                  example: 20
              required:
                - member_ID
                - facility
      responses:
        "200":
          description: Invoice created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "Invoice created successfully"
                  status:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 18
                      invoice_type:
                        type: string
                        example: "Facility"
                      generated_by:
                        type: string
                        example: "admin"
                      member:
                        type: string
                        example: "Salauddin"
                      restaurant:
                        type: string
                        nullable: true
                        example: null
                      created_at:
                        type: string
                        format: date-time
                        example: "2025-04-10T13:21:11.690208+06:00"
                      updated_at:
                        type: string
                        format: date-time
                        example: "2025-04-10T13:21:11.690208+06:00"
                      is_active:
                        type: boolean
                        example: true
                      currency:
                        type: string
                        example: "BDT"
                      invoice_number:
                        type: string
                        example: "INV-6B831960"
                      balance_due:
                        type: string
                        example: "200.00"
                      paid_amount:
                        type: string
                        example: "0.00"
                      due_date:
                        type: string
                        nullable: true
                        example: null
                      issue_date:
                        type: string
                        example: "2025-04-10"
                      total_amount:
                        type: string
                        example: "200.00"
                      is_full_paid:
                        type: boolean
                        example: false
                      discount:
                        type: string
                        nullable: true
                        example: null
                      promo_code:
                        type: string
                        example: ""
                      tax:
                        type: string
                        nullable: true
                        example: null
                      status:
                        type: string
                        example: "unpaid"
                      event:
                        type: string
                        nullable: true
                        example: null
        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

  /api/promo_code/v1/promo_codes/:
    post:
      summary: Create a new promo code
      description: Create and store a new promo code .
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object

              properties:
                promo_code:
                  type: string
                  example: "CILDANK50"
                start_date:
                  type: string
                  format: date
                  example: "2025-04-13"
                end_date:
                  type: string
                  format: date
                  example: "2025-05-13"
                percentage:
                  type: number
                  format: float
                  example: 10.00
                amount:
                  type: number
                  format: float
                  nullable: true
                  example: null
                limit:
                  type: integer
                  example: 100
                description:
                  type: string
                  example: "10% off for Cildank Premium members."
                category:
                  type: array
                  items:
                    type: integer
                    example: 1

              required:
                - promo_code
                - start_date
                - end_date
                - percentage
                - limit
                - description
                - category

      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object

                properties:
                  code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: "Promo code created successfully"
                  status:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      promo_code:
                        type: string
                        example: "CILDANK50"
                      start_date:
                        type: string
                        format: date
                        example: "2025-04-13"
                      end_date:
                        type: string
                        format: date
                        example: "2025-05-13"
                      percentage:
                        type: string
                        example: "10.00"
                      amount:
                        type: string
                        nullable: true
                        example: null
                      limit:
                        type: integer
                        example: 100
                      remaining_limit:
                        type: integer
                        example: 100
                      description:
                        type: string
                        example: "10% off for Cildank Premium members."
                      membership_type:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 2
                          name:
                            type: string
                            example: "CM"
                required:
                  - code
                  - message
                  - status
                  - data
        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

    get:
      summary: Get all promo codes
      description: Retrieve a list of available promo codes with details.
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object

                properties:
                  code:
                    type: integer
                    example: 200
                  message:
                    type: string
                    example: "Promo code list retrieved successfully"
                  status:
                    type: string
                    example: "success"
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        created_at:
                          type: string
                          format: date-time
                          example: "2025-04-13T17:12:00.947650+06:00"
                        updated_at:
                          type: string
                          format: date-time
                          example: "2025-04-13T17:12:00.947650+06:00"
                        is_active:
                          type: boolean
                          example: true
                        promo_code:
                          type: string
                          example: "CILDANK50"
                        start_date:
                          type: string
                          format: date
                          example: "2025-04-13"
                        end_date:
                          type: string
                          format: date
                          example: "2025-05-13"
                        percentage:
                          type: string
                          example: "10.00"
                        amount:
                          type: string
                          nullable: true
                          example: null
                        limit:
                          type: integer
                          example: 100
                        remaining_limit:
                          type: integer
                          example: 0
                        description:
                          type: string
                          example: "10% off for Cildank Premium members."
                        membership_type:
                          type: object
                          properties:
                            id:
                              type: integer
                              example: 2
                            name:
                              type: string
                              example: "CM"
                required:
                  - code
                  - message
                  - status
                  - data
        "500":
          description: "500"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
  /api/promo_code/v1/promo_codes/categories/:
    post:
      summary: Create a new promo code category
      description: Add a new category for organizing promo codes.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object

              properties:
                name:
                  type: string
                  example: "event"
              required:
                - name
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                required:
                  - code
                  - message
                  - status
                  - data
                properties:
                  code:
                    type: integer
                    example: 201
                  message:
                    type: string
                    example: "Promo code category created successfully"
                  status:
                    type: string
                    example: "success"
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      name:
                        type: string
                        example: "event"
                    required:
                      - id
                      - name
        "500":
          description: "500"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
    get:
      summary: View all promo code categories
      description: View all promo code categories
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: List of all promo code categories
                  data:
                    type: object
                required:
                  - code
                  - status
                  - message
                  - data
        "500":
          description: "500"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

  /api/promo_code/v1/applied_promo_codes/:
    get:
      summary: View all applied promo codes
      description: View the list of all promo code that has been applied
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: List of all used promo codes
                  data:
                    type: object
                required:
                  - code
                  - status
                  - message
                  - data
        "500":
          description: "500"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

  /api/member_financial/v1/member_accounts/recharge/:
    post:
      security:
        - TokenAuth: []
      summary: Add balance in member account
      description: >
        Add balance in member account. If the member has any due amount,
        the system will automatically deduct it from the account.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object

              properties:
                member_ID:
                  type: string
                  description: ID of the member
                  example: BM0002
                amount:
                  type: number
                  format: float
                  description: Amount to recharge
                  example: 500.00
              required:
                - member_ID
                - amount
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Balance recharged successfully and dues cleared if any
                  data:
                    type: object
                    properties:
                      member_ID:
                        type: integer
                        example: 123
                      amount:
                        type: number
                        format: float
                        example: 1000.00
                    required:
                      - member_ID
                      - amount
        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

  /api/member/v1/members/list/:
    get:
      summary: retrieve all members
      description: retrieve all members
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: View all members
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        member_ID:
                          type: string
                          example: BM0001
                        first_name:
                          type: string
                          example: Salauddin
                        last_name:
                          type: string
                          example: Ahmed
                        gender:
                          type: string
                          example: male
                        date_of_birth:
                          type: string
                          format: date
                          example: "2025-04-06"
                        batch_number:
                          type: string
                          example: "1"
                        anniversary_date:
                          type: string
                          format: date
                          example: "2022-04-06"
                        profile_photo:
                          type: string
                          example: /media/profile_photos/7028528.jpg
                        blood_group:
                          type: string
                          example: B+
                        nationality:
                          type: string
                          example: BD
                        membership_type:
                          type: string
                          example: BM
                        institute_name:
                          type: string
                          example: Bramonbaria Polytechnic Institute
                        membership_status:
                          type: string
                          example: active
                        marital_status:
                          type: string
                          example: unmarried
                  pagination:
                    $ref: "#/components/schemas/Pagination"
        "500":
          description: "500"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

  /api/member_financial/v1/lounge/upload/excel/:
    post:
      summary: upload a lounge excel file
      description: upload a lounge excel file and  generate invoice and payments
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                excel_file:
                  type: string
                  format: binary
                income_particular:
                  type: integer
                  example: 1
                received_from:
                  type: integer
                  example: 1
                confirm_reupload:
                  type: boolean
                  example: false
              required:
                - excel_file
                - income_particular
                - received_from
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Excel file uploaded successfully
                  data:
                    type: object
                required:
                  - code
                  - status
                  - message
                  - data
        "500":
          description: "500"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
  /api/member_financial/v1/others/upload/excel/:
    post:
      summary: upload a others  excel file
      description: upload a others excel file and  generate invoice and payments
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                excel_file:
                  type: string
                  format: binary
                income_particular:
                  type: integer
                  example: 1
                received_from:
                  type: integer
                confirm_reupload:
                  type: boolean
                  example: false
              required:
                - excel_file
                - income_particular
                - received_from
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Excel file uploaded successfully
                  data:
                    type: object
                required:
                  - code
                  - status
                  - message
                  - data
        "500":
          description: "500"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"

  /api/mails/v1/configs/:
    post:
      summary: Set mail configs
      description: Set mails configuration settings for the mail account
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: main_name
                provider:
                  type: string
                  example: gmail
                host:
                  type: string
                  example: gmail
                port:
                  type: integer
                  example: 550
                username:
                  type: string
                  example: asjdld
                password:
                  type: string
                  example: password
                use_tls:
                  type: boolean
                  example: true
                use_ssl:
                  type: boolean
                  example: false
                aws_access_key_id:
                  type: string
                  example: key_of_aws
                aws_secret_access_key:
                  type: string
                  example: key_of_aws
                aws_region:
                  type: string
                  example: singapore
                ses_configuration_set:
                  type: string
                  example: ses_config Set
                iam_role_arn:
                  type: string
                  example: 123919
                enable_tracking:
                  type: boolean
                  example: false
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: added email config successfully
                  data:
                    type: object
    get:
      summary: Get all mail configs
      description: Get all mail configurations for mail account
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Viewing all mail configs
                  data:
                    type: array
                    items:
                      type: object

  /api/mails/v1/email/composes/:
    post:
      summary: Compose an email
      description: Compose an email for sending
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                subject:
                  type: string
                  example: Mail subject
                body:
                  type: string
                  example: mail body
                configurations:
                  type: integer
                  example: 1
                attachments:
                  type: string
                  format: binary

      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Successfully completed creation

    get:
      summary: View all email composes
      description: View all created email composes
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: email composes

                  data:
                    type: array
                    items:
                      type: object

  /api/mails/v1/email/composes/{id}/:
    patch:
      summary: Update the mail compose
      description: Update mail compose with its Id
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      requestBody:
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                subject:
                  type: string
                  example: Mail subject
                body:
                  type: string
                  example: mail body
                configurations:
                  type: integer
                  example: 1
                attachments:
                  type: string
                  format: binary
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Updated the compose file

    delete:
      summary: Delete the mail compose
      description: Delete mail compose from db
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1

      responses:
        "204":
          description: "204"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 204
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Mail compose deleted successful

  /api/mails/v1/configs/{id}/:
    put:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      summary: update mail configs
      description: Update mail configs by id
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: main_name
                provider:
                  type: string
                  example: Gmail
                host:
                  type: string
                  example: Gmail
                port:
                  type: integer
                  example: 550
                username:
                  type: string
                  example: asjdld
                password:
                  type: string
                  example: password
                use_tls:
                  type: boolean
                  example: true
                use_ssl:
                  type: boolean
                  example: false
                aws_access_key_id:
                  type: string
                  example: key_of_aws
                aws_secret_access_key:
                  type: string
                  example: key_of_aws
                aws_region:
                  type: string
                  example: singapore
                ses_configuration_set:
                  type: string
                  example: ses_config Set
                iam_role_arn:
                  type: string
                  example: 123919
                enable_tracking:
                  type: boolean
                  example: false
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: added email config successfully
                  data:
                    type: object

    delete:
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: integer
            example: 1
      summary: Delete mail configs
      description: Delete mail configs by id
      responses:
        "204":
          description: "204"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 204
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: success

  /api/mails/v1/email/groups/:
    post:
      summary: Create email group
      description: Create a new email group to send bulk emails to a specific group of recipients.
      tags:
        - Email Group
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "Developer Team"
                description:
                  type: string
                  example: "Group for sending emails to all developers"
                user:
                  type: integer
                  example: 1
              required:
                - name
                - user
      responses:
        "201":
          description: "Email Group created successfully"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Email Group created successfully
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 3
                      name:
                        type: string
                        example: Developer Team
                    required:
                      - id
                      - name
        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
    get:
      summary: Retrieve all email groups with permission
      description: Retrieve all email groups with information by bulk_emails_management permission
      tags:
        - Email Group
      responses:
        "200":
          description: "Success"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: email composes
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 2
                        name:
                          type: string
                          example: developer_team
                        description:
                          type: string
                          example: Group for sending emails to all developers
                        created_at:
                          type: string
                          example: 2025-06-22T10:46:35.076987+06:00
                        updated_at:
                          type: string
                          example: 2025-06-22T10:46:35.076987+06:00
                      required:
                        - id
                        - name
                        - description
                        - created_at
                        - updated_at
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"

  /api/mails/v1/email/groups/{group_id}/:
    patch:
      summary: Update an email group
      description: Update one or more fields of an email group by ID with bulk_emails_management permission
      tags:
        - Email Group
      parameters:
        - name: group_id
          in: path
          required: true
          description: ID of the email group to update
          schema:
            type: integer
            example: 2
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: updated_developer_team
                description:
                  type: string
                  example: Updated description for the developer email group
                user:
                  type: integer
                  example: 1
      responses:
        "200":
          description: Email group updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Email group updated successfully
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 2
                      name:
                        type: string
                        example: updated_developer_team
                required:
                  - id
                  - name
        "400":
          description: "Bad Request"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "401":
          description: "Unauthorized"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "404":
          description: "Not Found"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: "Internal Server Error"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
    delete:
      summary: Delete an email group
      description: Delete a specific email group by ID with bulk_emails_management permission
      tags:
        - Email Group
      parameters:
        - name: group_id
          in: path
          required: true
          description: ID of the email group to delete
          schema:
            type: integer
            example: 2
      responses:
        "204":
          description: "204"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 204
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Email group deleted successfully
        "400":
          description: Bad Request – Invalid ID or deletion not allowed
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "401":
          description: Unauthorized – Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "404":
          description: Not Found – Email group not found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"

    get:
      summary: Retrieve a specific email group
      description: Retrieve details of an email group by its ID with bulk_emails_management permission
      tags:
        - Email Group
      parameters:
        - name: group_id
          in: path
          required: true
          description: ID of the email group to retrieve
          schema:
            type: integer
            example: 2
      responses:
        "200":
          description: Successfully retrieved the email group
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Email group retrieved successfully
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 2
                      name:
                        type: string
                        example: developer_team
                      description:
                        type: string
                        example: Group for sending emails to all developers
                      created_at:
                        type: string
                        example: 2025-06-22T10:46:35.076987+06:00
                      updated_at:
                        type: string
                        example: 2025-06-23T09:12:01.012345+06:00
                    required:
                      - id
                      - name
                      - description
                      - created_at
                      - updated_at
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "404":
          description: "404"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: "500"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"

  /api/mails/v1/email/lists/:
    post:
      summary: Create Email List
      description: Create a new Email list to send bulk emails to existing email in Email list
      tags:
        - Email List
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: array
                  items:
                    type: string
                    example: ahmedsalauddin677785@gmail.com
                group:
                  type: integer
                  example: 2
              required:
                - email
                - group
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Email Group created successfully
                  data:
                    type: object
                    properties:
                      group:
                        type: integer
                        example: 1
                    required:
                      - group
        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
    get:
      summary: Retrieve all email lists
      description: Retrieve all email addresses in the system with their group and subscription status
      parameters:
        - name: page
          in: query
          description: The page number to retrieve.
          required: false
          schema:
            type: integer
            example: 1

        - name: page_size
          in: query
          description: The number of items per page.
          required: false
          schema:
            type: integer
            example: 10
        - name: email
          in: query
          schema:
            type: string
            example: ahmedsalauddin677785@gmail.com
        - name: is_subscribed
          in: query
          schema:
            type: boolean
            example: true
        - name: group
          in: query
          schema:
            type: integer
            example: 5

        - name: group_name
          in: query
          schema:
            type: string
            example: developer
      tags:
        - Email List
      responses:
        "200":
          description: Successfully retrieved email lists
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Email lists retrieved successfully
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 2
                        email:
                          type: string
                          example: ahmedsalauddin677785@gmail.com
                        is_subscribed:
                          type: boolean
                          example: true
                        group:
                          type: integer
                          example: 5
                      required:
                        - id
                        - email
                        - is_subscribed
                        - group
        "401":
          description: Unauthorized – Authentication required
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"

  /api/mails/v1/email/lists/{id}/:
    get:
      summary: Retrieve a specific email list
      description: Retrieve details of a specific email address in the email list by ID
      tags:
        - Email List
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the email list to retrieve
          schema:
            type: integer
            example: 2
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Email list retrieved successfully
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 2
                      email:
                        type: string
                        example: ahmedsalauddin677785@gmail.com
                      is_subscribed:
                        type: boolean
                        example: true
                      group:
                        type: integer
                        example: 5
                    required:
                      - id
                      - email
                      - is_subscribed
                      - group
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "404":
          description: "404"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: "500"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"

    patch:
      summary: Update a specific email list
      description: Update one or more fields of a specific email list by ID
      tags:
        - Email List
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the email list to update
          schema:
            type: integer
            example: 2
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                data:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      email:
                        type: string
                        example: newemail@example.com
                      is_subscribed:
                        type: boolean
                        example: false
                      group:
                        type: integer
                        example: 4
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Email list updated successfully
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 2
                      email:
                        type: string
                        example: newemail@example.com
                    required:
                      - id
                      - email
        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "404":
          description: "404"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: "500"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"

    delete:
      summary: Delete a specific email list
      description: Delete an email list entry by its ID
      tags:
        - Email List
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the email list to delete
          schema:
            type: integer
            example: 2
      responses:
        "204":
          description: "204"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 204
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Email List deleted successfully

        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "404":
          description: "404"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: "500"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"

  /api/mails/v1/email/individual_emails/:
    post:
      summary: Create Single Email
      description: Create single email for send mail to specific email.
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: ahmedsalauddin677785@gmail.com
              required:
                - email
      responses:
        "201":
          description: "201"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Single Email created successfully
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 1
                      email:
                        type: string
                        example: test@gmail.com
                    required:
                      - id
                      - email
        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
    get:
      summary: Retrieve all single emails
      description: Retrieve all single emails
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Single Email created successfully
                  data:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: integer
                          example: 1
                        email:
                          type: string
                          example: salauddin@gmail.com
                      required:
                        - id
                        - email

                required:
                  - code
                  - status
                  - message
                  - data
  /api/mails/v1/email/individual_emails/{id}/:
    patch:
      summary: Update Single email
      description: Update Single email
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the Single email to update
          schema:
            type: integer
            example: 2
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  example: salauddin1@gmail.com
              required:
                - email

      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Email list updated successfully
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 2
                      email:
                        type: string
                        example: newemail@example.com
                    required:
                      - id
                      - email
        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "404":
          description: "404"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: "500"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"
    delete:
      summary: Detele Single Email
      description: Delete Single Email
      parameters:
        - name: id
          in: path
          required: true
          description: ID of the Single email to delete
          schema:
            type: integer
            example: 2
      responses:
        "204":
          description: "204"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 204
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Single Email deleted successfully
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "404":
          description: "404"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: "500"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"

  /api/mails/v1/emails/send/:
    post:
      summary: Send Bulk and Single Email
      description: Send Bulk and Single Email

      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email_compose:
                  type: integer
                  example: 1
                group:
                  type: integer
                  example: 1
                schedule_date:
                  type: string
                  example: 2025-06-22T10:46:35.076987+06:00
                notes:
                  type: string
                  example: abcd123

                single_email:
                  type: integer
                  example: 2
              required:
                - email_compose
                - group
                - single_email
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 201
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Email Send successfully
        "400":
          description: "400"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/BadRequestResponse"
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "500":
          description: "500"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"

  /api/mails/v1/email/outboxes/:
    get:
      summary: Retrieve all outboxes
      description: Retrieve all outboxes

      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: All outboxes retrieved successfully
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 2
                      email_address:
                        type: string
                        example: ahmedsalaud6785@gmail.com
                      status:
                        type: string
                        example: success
                      failed_reason:
                        type: string
                        example: (535, b'5.7.8 Username and Password not accepted. For more information, go to\n5.7.8  https://support.google.com/mail/?p=BadCredentials d2e1a72fcca58-749b5e23d13sm1656262b3a.58 - gsmtp')
                      email_compose:
                        type: integer
                        example: 1
                    required:
                      - id
                      - email_address
                      - status
                      - email_compose

        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "404":
          description: "404"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: "500"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"

  /api/mails/v1/email/outboxes/{id}/:
    get:
      summary: Retrieve a specific outboxes
      description: Retrieve details of a specific outbox  by ID

      parameters:
        - name: id
          in: path
          required: true
          description: ID of the outbox to retrieve
          schema:
            type: integer
            example: 2
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: Outbox retrieved successfully
                  data:
                    type: object
                    properties:
                      id:
                        type: integer
                        example: 2
                      email_address:
                        type: string
                        example: ahmedsalaud6785@gmail.com
                      status:
                        type: string
                        example: success
                      failed_reason:
                        type: string
                        example: (535, b'5.7.8 Username and Password not accepted. For more information, go to\n5.7.8  https://support.google.com/mail/?p=BadCredentials d2e1a72fcca58-749b5e23d13sm1656262b3a.58 - gsmtp')
                      email_compose:
                        type: integer
                        example: 1
                    required:
                      - id
                      - email_address
                      - status
                      - email_compose
        "401":
          description: "401"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UnauthorizedError"
        "404":
          description: "404"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/NotFoundError"
        "500":
          description: "500"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/InternalServerError"

  /api/mails/v1/emails/retry/:
    post:
      summary: Retry faild emails
      description: Retry faild emails to resend
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                    example: 200
                  status:
                    type: string
                    example: success
                  message:
                    type: string
                    example: ok
                  data:
                    type: object
  /api/core/v1/all_choices/:
    get:
      parameters:
        - name: cache
          in: query
          schema:
            type: boolean
          required: false
      summary: Get all choices
      description: Get all available choices from all available choices
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: object

  /api/dashboard/v1/dashboard_cards/:
    get:
      summary: Get dashboard cards data.
      description: Get dashboard cards data.
      parameters:
        - name: created_at
          in: query
          schema:
            type: string
            format: date
        - name: created_at_after
          in: query
          schema:
            type: string
            format: date
        - name: created_at_before
          in: query
          schema:
            type: string
            format: date
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: object

  /api/dashboard/v1/membership_chart/:
    get:
      summary: Get membership chart data
      description: Get membership chart data
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: object
  /api/dashboard/v1/membership_chart/pie_chart/:
    get:
      summary: Get membership pie chart data
      description: Get membership pie chart data
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: object

  /api/dashboard/v1/dashboard_cards/kpi/:
    get:
      summary: Get dashboard KPI cards data.
      description: Get dashboard KPI cards data.
      responses:
        "200":
          description: "200"
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: integer
                  status:
                    type: string
                  message:
                    type: string
                  data:
                    type: object

components:
  securitySchemes:
    TokenAuth:
      type: http
      scheme: bearer
      bearerFormat: Bearer
      description: >
        Use the following format for the `Authorization` header: 
        `Bearar <your-token>`. Example: `Bearar 9054f7aa9305e012b3c2300408c3dfdf390fcddf`.
  schemas:
    SuccessAuthResponse:
      type: object
      properties:
        code:
          type: integer
          example: 200
        message:
          type: string
          example: Successfully operation done
        status:
          type: string
          enum:
            - "success"
            - "failed"
          example: "success"
        access_token:
          type: string
          example: ecb9cf8dafd7910573da615f76be6263901844c1
        refreash_token:
          type: string
          example: ecb9cf8dafd7910573da615f76be6263901844c1
      required:
        - status
        - access_token
        - refreash_token
        - code
        - message
    FailedAuthResponse:
      type: object
      properties:
        code:
          type: integer
          example: 400
        status:
          type: string
          enum:
            - "success"
            - "failed"
          example: "failed"
        message:
          type: string
          example: "operations  success"

        errors:
          type: object
          properties:
            username:
              type: array
              items:
                type: string
              example: ["username already taken"]
            email:
              type: array
              items:
                type: string
              example: ["email already taken"]
            password:
              type: array
              items:
                type: string
              example: ["password is too short"]

      required:
        - status
        - errors
        - code
        - message
    StringArray:
      type: array
      items:
        type: string
        example: something went wrong

    UnauthorizedError:
      type: object
      properties:
        code:
          type: integer
          example: 401
        message:
          type: string
          example: You do not have permission to perform this action.
        status:
          type: string
          example: "success"
        errors:
          type: object
          properties:
            request:
              type: array
              items:
                type: string
                example: "request is not valid"
      required:
        - code
        - status
        - message
        - errors
    MethodNotFoundError:
      type: object
      properties:
        code:
          type: integer
          example: 404
        message:
          type: string
          example: "Product not found"
        status:
          type: string
          example: "failed"
        errors:
          type: object
          properties:
            product:
              type: array
              items:
                type: string
                example: "Product not found"
    InternalServerError:
      type: object
      properties:
        code:
          type: integer
          example: 401
        status:
          type: string
          example: "success"
        message:
          type: string
          example: operation failed
        errors:
          type: object
      required:
        - code
        - status
        - message
        - errors

    CoreAPIResonseObject:
      type: object
      properties:
        name:
          type: string
          example: some name
        id:
          type: string
          example: 1213
      required:
        - name
        - id

    BadRequestResponse:
      type: object
      properties:
        code:
          type: integer
          example: 400
        status:
          type: string
          enum:
            - "success"
            - "failed"
        message:
          type: string
          example: something went wrong
        errors:
          type: object
          properties:
            username:
              type: array
              items:
                type: string
                example: "username is not valid"
      required:
        - code
        - status
        - message
        - errors
    NormalUserActivityLog:
      type: object
      properties:
        user:
          type: integer
          example: 1
        ip_address:
          type: string
          example: "8.8.8.8"
        timestamp:
          type: string
          format: date-time
          example: "2024-02-12T10:30:00Z"
        location:
          type: object
          example: {}
        verb:
          type: string
          example: "retrieve activity log"
        description:
          type: string
          example: retrieve user activity log data
        path:
          type: string
          example: "http://127.0.0.1:8000/api/activity_log/v1/activity/user_activity/"

      required:
        - user
        - ip_address
        - timestamp
        - location
        - verb
        - description
        - path

    AdminUserActivityLog:
      type: object
      properties:
        user:
          type: integer
          example: 1
        ip_address:
          type: string
          example: "8.8.8.8"
        verb:
          type: string
          example: "Retrieved user activity log data"
        description:
          type: string
          example: "Admin viewed activity logs"
        timestamp:
          type: string
          format: date-time
          example: "2024-02-12T10:30:00Z"
        location:
          type: string
          example: "Dhaka, Bangladesh"
        path:
          type: string
          example: "http://127.0.0.1:8000/api/activity_log/v1/activity/user_activity/"
        user_agent:
          type: string
          example: PostmanRuntime/7.43.0
        request_method:
          type: string
          example: GET
        referrer_url:
          type: string
          example: http://127.0.0.1:8000/api/activity_log/v1/activity/all_user_activity/
        device:
          type: string
          example: DESKTOP-5T5F9P1
        severity_level:
          type: string
          example: info
      required:
        - user
        - ip_address
        - verb
        - description
        - timestamp
        - location
        - path
        - user_agent
        - request_method
        - referrer_url
        - device
        - severity_level

    Pagination:
      type: object
      properties:
        count:
          type: integer
          example: 2
        total_pages:
          type: integer
          example: 2
        current_page:
          type: integer
          example: 1
        next:
          type: string
          example: "http://127.0.0.1:8000/api/activity_log/v1/activity/user_activity/?page=2"
        previous:
          type: string
          example: null
        page_size:
          type: integer
          example: 10
